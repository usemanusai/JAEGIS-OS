version: '3.8'

services:
  # N.L.D.S. API Service
  nlds-api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://nlds_user:nlds_password@postgres:5432/nlds_dev
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=development
      - JAEGIS_ENDPOINT=http://jaegis-mock:8001
      - AMASIAP_ENDPOINT=http://amasiap-mock:8002
    volumes:
      - ./nlds:/app/nlds
      - ./tests:/app/tests
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - jaegis-mock
      - amasiap-mock
    networks:
      - nlds-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=nlds_dev
      - POSTGRES_USER=nlds_user
      - POSTGRES_PASSWORD=nlds_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - nlds-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nlds_user -d nlds_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - nlds-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # JAEGIS Mock Service (for development)
  jaegis-mock:
    build:
      context: ./mocks
      dockerfile: Dockerfile.jaegis
    ports:
      - "8001:8001"
    environment:
      - LOG_LEVEL=DEBUG
    networks:
      - nlds-network
    restart: unless-stopped

  # A.M.A.S.I.A.P. Mock Service (for development)
  amasiap-mock:
    build:
      context: ./mocks
      dockerfile: Dockerfile.amasiap
    ports:
      - "8002:8002"
    environment:
      - LOG_LEVEL=DEBUG
    networks:
      - nlds-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nlds-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - nlds-network
    restart: unless-stopped

  # Elasticsearch (for logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - nlds-network
    restart: unless-stopped

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - nlds-network
    restart: unless-stopped

  # Nginx Load Balancer (for testing)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - nlds-api
    networks:
      - nlds-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  nlds-network:
    driver: bridge
