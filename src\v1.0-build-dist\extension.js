(()=>{"use strict";var e={102:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.Context7Integration=void 0;const r=s(n(398));t.Context7Integration=class{config;cache;isAvailable=!1;lastHealthCheck=null;healthCheckInterval=3e5;constructor(e){this.config={baseUrl:"https://api.context7.dev",autoActivate:!0,maxRetries:3,timeoutMs:3e4,cacheEnabled:!0,cacheTtlMs:36e5,...e},this.cache=new Map,this.initializeIntegration()}async initializeIntegration(){try{await this.healthCheck(),await this.loadConfiguration(),console.log("Context7 integration initialized successfully")}catch(e){console.warn("Context7 integration initialization failed:",e),this.isAvailable=!1}}async loadConfiguration(){const e=r.workspace.getConfiguration("jaegis method.context7");this.config.apiKey=e.get("apiKey")||process.env.CONTEXT7_API_KEY,this.config.baseUrl=e.get("baseUrl")||this.config.baseUrl,this.config.autoActivate=e.get("autoActivate",!0),this.config.maxRetries=e.get("maxRetries",3),this.config.timeoutMs=e.get("timeoutMs",3e4),this.config.cacheEnabled=e.get("cacheEnabled",!0),this.config.cacheTtlMs=e.get("cacheTtlMs",36e5)}async healthCheck(){try{const e=new Date;if(this.lastHealthCheck&&e.getTime()-this.lastHealthCheck.getTime()<this.healthCheckInterval)return this.isAvailable;const t=await this.makeRequest("/health","GET",null,5e3);return this.isAvailable=t.success,this.lastHealthCheck=e,this.isAvailable}catch(e){return this.isAvailable=!1,this.lastHealthCheck=new Date,!1}}async autoResearch(e){if(!this.config.autoActivate||!await this.healthCheck())return null;const t=Date.now();try{const n=this.generateCacheKey(e),a=this.getCachedResult(n);if(a)return{query:e,response:{...a,cached:!0},timestamp:new Date,duration:Date.now()-t,quality:this.assessResponseQuality(a)};const o=await this.performResearch(e);return o.success&&this.config.cacheEnabled&&this.setCachedResult(n,o),{query:e,response:o,timestamp:new Date,duration:Date.now()-t,quality:this.assessResponseQuality(o)}}catch(n){return console.error("Context7 auto-research failed:",n),{query:e,response:{success:!1,error:n instanceof Error?n.message:"Unknown error"},timestamp:new Date,duration:Date.now()-t,quality:0}}}async securityResearch(e,t,n){const a={query:`security vulnerabilities ${e} ${t||"latest"} ${(new Date).toISOString().split("T")[0]}`,sources:["nvd","github_advisories","snyk","osv"],focus:["security_vulnerabilities","cve_details","patch_availability","exploit_status"],packageName:e,version:t,ecosystem:n,dateContext:(new Date).toISOString().split("T")[0]};return await this.autoResearch(a)}async updateResearch(e,t,n,a){const o={query:`breaking changes migration guide ${e} ${t} to ${n}`,sources:["official_docs","github_releases","community_discussions","migration_guides"],focus:["breaking_changes","migration_steps","compatibility_issues","rollback_procedures"],packageName:e,version:`${t} -> ${n}`,ecosystem:a,dateContext:(new Date).toISOString().split("T")[0]};return await this.autoResearch(o)}async alternativeResearch(e,t,n){const a={query:`modern alternatives to ${e} ${t} ${(new Date).getFullYear()}`,sources:["community_recommendations","benchmark_comparisons","adoption_trends","expert_opinions"],focus:["alternative_packages","migration_complexity","performance_comparison","community_support"],packageName:e,ecosystem:n,dateContext:(new Date).toISOString().split("T")[0]};return await this.autoResearch(a)}async performResearch(e){const t={query:e.query,sources:e.sources||[],context:{date:e.dateContext||(new Date).toISOString().split("T")[0],focus:e.focus||[],package:e.packageName,version:e.version,ecosystem:e.ecosystem}};return await this.makeRequest("/research","POST",t)}async makeRequest(e,t,n,a){const o=`${this.config.baseUrl}${e}`,i=a||this.config.timeoutMs,s=new AbortController,r=setTimeout(()=>s.abort(),i);try{const e={"Content-Type":"application/json","User-Agent":"JAEGIS METHOD-Dakota-Agent/1.0"};this.config.apiKey&&(e.Authorization=`Bearer ${this.config.apiKey}`);const a=await fetch(o,{method:t,headers:e,body:n?JSON.stringify(n):void 0,signal:s.signal});if(clearTimeout(r),!a.ok)throw new Error(`HTTP ${a.status}: ${a.statusText}`);const i=await a.json();return{success:!0,data:i.data,insights:i.insights||[],recommendations:i.recommendations||[],sources:i.sources||[],confidence:i.confidence||.5}}catch(e){if(clearTimeout(r),e instanceof Error&&"AbortError"===e.name)throw new Error("Request timeout");throw e}}generateCacheKey(e){const t=`${e.query}|${e.sources?.join(",")}|${e.focus?.join(",")}|${e.packageName}|${e.version}`;return Buffer.from(t).toString("base64")}getCachedResult(e){if(!this.config.cacheEnabled)return null;const t=this.cache.get(e);return t?(new Date).getTime()-t.timestamp.getTime()>this.config.cacheTtlMs?(this.cache.delete(e),null):t.result:null}setCachedResult(e,t){this.config.cacheEnabled&&(this.cache.set(e,{result:t,timestamp:new Date}),this.cache.size>1e3&&this.cleanupCache())}cleanupCache(){const e=new Date,t=[];for(const[n,a]of this.cache.entries())e.getTime()-a.timestamp.getTime()>this.config.cacheTtlMs&&t.push(n);t.forEach(e=>this.cache.delete(e))}assessResponseQuality(e){if(!e.success)return 0;let t=.5;return e.confidence&&(t=Math.max(t,e.confidence)),e.sources&&e.sources.length>0&&(t+=Math.min(.2,.05*e.sources.length)),e.insights&&e.insights.length>0&&(t+=Math.min(.2,.04*e.insights.length)),e.recommendations&&e.recommendations.length>0&&(t+=Math.min(.1,.02*e.recommendations.length)),Math.min(1,t)}isIntegrationAvailable(){return this.isAvailable}getIntegrationStatus(){return{available:this.isAvailable,cacheSize:this.cache.size,lastHealthCheck:this.lastHealthCheck,config:{...this.config,apiKey:this.config.apiKey?"***":void 0}}}reset(){this.cache.clear(),this.lastHealthCheck=null,this.isAvailable=!1}dispose(){this.cache.clear()}}},108:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.BMadOrchestrator=void 0;const r=s(n(398)),c=n(118);t.BMadOrchestrator=class{context;analyzer;statusBar;initializer;activeAgents=[];currentMode;workflowProgress;constructor(e,t,n,a){this.context=e,this.analyzer=t,this.statusBar=n,this.initializer=a}async initializeWorkspace(e){try{await this.initializer.initializeWorkspace(e),await r.commands.executeCommand("jaegis method.internal.workspaceInitialized",{workspaceFolder:e.name,timestamp:(new Date).toISOString()})}catch(e){throw new c.BMadError(`Failed to initialize workspace: ${e}`,"INIT_FAILED","initialization")}}async executeMode(e,t){try{this.currentMode=e;const n=await this.createExecutionContext(e,t);this.initializeWorkflowProgress(e),await this.activateAgents(t.recommendedAgents),await this.executeWorkflow(n)}catch(t){throw console.error(`Failed to execute ${e} mode:`,t),this.statusBar.showError(`Failed to execute ${e} mode: ${t}`),t}}async activateAgents(e){try{this.activeAgents=[...e],this.currentMode&&this.statusBar.updateMode(this.currentMode,this.activeAgents),await r.commands.executeCommand("bmad.internal.agentsActivated",{agents:e,timestamp:(new Date).toISOString()}),console.log(`Activated agents: ${e.join(", ")}`)}catch(e){throw new c.BMadError(`Failed to activate agents: ${e}`,"AGENT_ACTIVATION_FAILED","execution")}}getActiveAgents(){return[...this.activeAgents]}getCurrentMode(){return this.currentMode}updateProgress(e){this.workflowProgress&&(this.workflowProgress={...this.workflowProgress,...e},this.statusBar.updateProgress(this.workflowProgress),r.commands.executeCommand("bmad.internal.progressUpdated",this.workflowProgress))}async createExecutionContext(e,t){const n=r.workspace.workspaceFolders?.[0];if(!n)throw new c.BMadError("No workspace folder available","NO_WORKSPACE","execution");const a=r.workspace.getConfiguration("bmad"),o={autoActivateRecommendedAgents:a.get("autoActivateRecommendedAgents",!0),enableRealTimeMonitoring:a.get("enableRealTimeMonitoring",!0),progressNotifications:a.get("progressNotifications",!0)},i=await this.getExistingArtifacts(n);return{mode:e,workspaceFolder:n,projectAnalysis:t,selectedAgents:t.recommendedAgents,userPreferences:o,existingArtifacts:i}}initializeWorkflowProgress(e){this.workflowProgress={mode:e,phase:"Initializing",progress:0,completedTasks:[],remainingTasks:this.getModeTaskList(e)},this.statusBar.updateProgress(this.workflowProgress)}async executeWorkflow(e){switch(e.mode){case"documentation":await this.executeDocumentationMode(e);break;case"fullDevelopment":await this.executeFullDevelopmentMode(e);break;case"continueProject":await this.executeContinueProjectMode(e);break;case"taskOverview":await this.executeTaskOverviewMode(e);break;case"debugMode":await this.executeDebugMode(e);break;case"continuousExecution":await this.executeContinuousExecutionMode(e);break;case"featureGapAnalysis":await this.executeFeatureGapAnalysisMode(e);break;case"githubIntegration":await this.executeGithubIntegrationMode(e);break;default:throw new c.BMadError(`Unknown mode: ${e.mode}`,"UNKNOWN_MODE","execution")}}async executeDocumentationMode(e){this.updateProgress({phase:"Project Analysis",progress:10}),await this.delay(1e3),this.updateProgress({phase:"PRD Development",progress:30}),await this.delay(1e3),this.updateProgress({phase:"Architecture Design",progress:60}),await this.delay(1e3),this.updateProgress({phase:"Checklist Creation",progress:90}),await this.delay(1e3),this.updateProgress({phase:"Documentation Complete",progress:100});const t=await r.window.showInformationMessage("Documentation Mode completed successfully! Generated: prd.md, architecture.md, checklist.md","Open Documents","Start Development","OK");"Open Documents"===t?await this.openGeneratedDocuments(e.workspaceFolder):"Start Development"===t&&await this.executeMode("fullDevelopment",e.projectAnalysis)}async executeFullDevelopmentMode(e){this.updateProgress({phase:"Development Planning",progress:10});const t=await r.window.showInformationMessage("Full Development Mode: Ready to begin development workflow","Continue with Recommended Agents","Select Different Agents","Cancel");"Continue with Recommended Agents"===t?this.updateProgress({phase:"Development in Progress",progress:50}):"Select Different Agents"===t&&await r.commands.executeCommand("bmad.selectAgents")}async executeContinueProjectMode(e){this.updateProgress({phase:"Analyzing Existing Project",progress:20});const t=await this.analyzeExistingProjectState(e.workspaceFolder);this.updateProgress({phase:"Identifying Continuation Points",progress:60}),await this.showContinuationOptions(t),this.updateProgress({phase:"Project Analysis Complete",progress:100})}async executeTaskOverviewMode(e){this.updateProgress({phase:"Analyzing Task Structure",progress:30}),await this.delay(1e3),this.updateProgress({phase:"Generating Dashboard",progress:70}),await this.generateTaskDashboard(e.workspaceFolder),this.updateProgress({phase:"Task Overview Complete",progress:100})}async executeDebugMode(e){this.updateProgress({phase:"Running Diagnostics",progress:25});const t=r.languages.getDiagnostics(),n=this.processDiagnostics(t);this.updateProgress({phase:"Analyzing Issues",progress:60}),n.length>0&&(this.statusBar.updateIssues(n),"View Issues"===await r.window.showWarningMessage(`Found ${n.length} issues to resolve`,"View Issues","Auto-Fix Available","Continue Analysis")&&await r.commands.executeCommand("workbench.actions.view.problems")),this.updateProgress({phase:"Debug Analysis Complete",progress:100})}async executeContinuousExecutionMode(e){this.updateProgress({phase:"Autonomous Execution Started",progress:10});const t=["Analysis","Planning","Implementation","Validation"];for(let e=0;e<t.length;e++){const n=t[e],a=25+20*e;this.updateProgress({phase:`Autonomous ${n}`,progress:a}),await this.delay(2e3)}this.updateProgress({phase:"Autonomous Execution Complete",progress:100})}async executeFeatureGapAnalysisMode(e){this.updateProgress({phase:"Analyzing Current Features",progress:20}),await this.delay(1e3),this.updateProgress({phase:"Comparing with Industry Standards",progress:50}),await this.delay(1e3),this.updateProgress({phase:"Generating Recommendations",progress:80}),await this.delay(1e3),this.updateProgress({phase:"Feature Gap Analysis Complete",progress:100}),r.window.showInformationMessage("Feature Gap Analysis completed! Check the generated report for improvement recommendations.")}async executeGithubIntegrationMode(e){this.updateProgress({phase:"Analyzing Repository Structure",progress:20}),await this.delay(1e3),this.updateProgress({phase:"Generating README",progress:50}),await this.delay(1e3),this.updateProgress({phase:"Creating Documentation",progress:80}),await this.delay(1e3),this.updateProgress({phase:"GitHub Integration Complete",progress:100}),r.window.showInformationMessage("GitHub Integration completed! Professional repository documentation has been generated.")}async getExistingArtifacts(e){const t=[],n=["README.md","prd.md","architecture.md","checklist.md"];for(const a of n)try{const n=r.Uri.joinPath(e.uri,a);await r.workspace.fs.stat(n),t.push(a)}catch{}return t}getModeTaskList(e){return{documentation:["Project Analysis","PRD Development","Architecture Design","Checklist Creation"],fullDevelopment:["Planning","Setup","Development","Testing","Deployment"],continueProject:["State Analysis","Context Restoration","Continuation Planning"],taskOverview:["Task Analysis","Dashboard Generation","Progress Tracking"],debugMode:["Diagnostics","Issue Analysis","Resolution Planning"],continuousExecution:["Autonomous Analysis","Autonomous Planning","Autonomous Implementation"],featureGapAnalysis:["Feature Analysis","Gap Identification","Recommendation Generation"],githubIntegration:["Repository Analysis","Documentation Generation","Workflow Setup"]}[e]||[]}async delay(e){return new Promise(t=>setTimeout(t,e))}async openGeneratedDocuments(e){const t=["prd.md","architecture.md","checklist.md"];for(const n of t)try{const t=r.Uri.joinPath(e.uri,n);await r.window.showTextDocument(t)}catch(e){console.log(`Document ${n} not found or couldn't be opened`)}}async analyzeExistingProjectState(e){return{hasExistingTasks:!1,completionPercentage:0,lastModified:new Date}}async showContinuationOptions(e){const t=await r.window.showQuickPick(["Resume from last checkpoint","Start new phase","Review completed work","Update project scope"],{title:"Select Continuation Point",placeHolder:"Choose how to continue the project"});t&&r.window.showInformationMessage(`Continuing with: ${t}`)}async generateTaskDashboard(e){r.window.showInformationMessage("Task dashboard generated successfully!")}processDiagnostics(e){const t=[];for(const[n,a]of e)for(const e of a)e.severity===r.DiagnosticSeverity.Error&&t.push({severity:"critical",category:"quality",message:e.message,file:n.fsPath,line:e.range.start.line,canAutoFix:!1});return t}}},118:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BMadError=void 0;class n extends Error{code;category;constructor(e,t,n="execution"){super(e),this.code=t,this.category=n,this.name="BMadError"}}t.BMadError=n},134:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.BMadInitializer=void 0;const r=s(n(398)),c=s(n(928));t.BMadInitializer=class{BMAD_FOLDER="bmad-agent";analyzer;constructor(e){this.analyzer=e}async checkIfInitializationNeeded(e){const t=c.join(e.uri.fsPath,this.BMAD_FOLDER);try{const e=r.Uri.file(t);return await r.workspace.fs.stat(e),!1}catch{return!0}}async initializeWorkspace(e){try{const t=c.join(e.uri.fsPath,this.BMAD_FOLDER);if(!await this.checkIfInitializationNeeded(e))return void await this.validateExistingSetup(t);const n=await this.analyzer.analyzeProject(e);await this.createBmadStructure(t,n),await this.configureWorkspaceSettings(e,n),await this.showInitializationSuccess(n),console.log(`BMAD initialized successfully for ${e.name}`)}catch(e){throw console.error("Failed to initialize BMAD workspace:",e),new Error(`Failed to initialize BMAD workspace: ${e}`)}}async createBmadStructure(e,t){const n=["personas","tasks","templates","checklists","data"];await r.workspace.fs.createDirectory(r.Uri.file(e));for(const t of n){const n=c.join(e,t);await r.workspace.fs.createDirectory(r.Uri.file(n))}await this.copyBaseTemplates(e,t),await this.generateConfiguration(e,t),await this.createIdeOrchestratorConfig(e,t)}async copyBaseTemplates(e,t){await this.createPersonaFiles(e),await this.createTaskFiles(e),await this.createTemplateFiles(e,t),await this.createChecklistFiles(e),await this.createDataFiles(e)}async createPersonaFiles(e){const t=c.join(e,"personas"),n=[{name:"bmad.md",content:this.getBmadPersonaContent()},{name:"pm.md",content:this.getPmPersonaContent()},{name:"architect.md",content:this.getArchitectPersonaContent()},{name:"design-architect.md",content:this.getDesignArchitectPersonaContent()},{name:"security-engineer.md",content:this.getSecurityEngineerPersonaContent()},{name:"platform-engineer.md",content:this.getPlatformEngineerPersonaContent()},{name:"task-breakdown-specialist.md",content:this.getTaskBreakdownSpecialistPersonaContent()},{name:"technical-writer.md",content:this.getTechnicalWriterPersonaContent()}];for(const e of n){const n=c.join(t,e.name),a=(new TextEncoder).encode(e.content);await r.workspace.fs.writeFile(r.Uri.file(n),a)}}async createTaskFiles(e){const t=c.join(e,"tasks"),n=[{name:"documentation-mode-workflow.md",content:this.getDocumentationModeTaskContent()},{name:"continue-existing-project-workflow.md",content:this.getContinueProjectTaskContent()},{name:"task-list-overview-workflow.md",content:this.getTaskOverviewTaskContent()},{name:"debug-troubleshoot-workflow.md",content:this.getDebugTaskContent()}];for(const e of n){const n=c.join(t,e.name),a=(new TextEncoder).encode(e.content);await r.workspace.fs.writeFile(r.Uri.file(n),a)}}async createTemplateFiles(e,t){const n=c.join(e,"templates"),a=[{name:"prd-template.md",content:this.getPrdTemplateContent()},{name:"architecture-template.md",content:this.getArchitectureTemplateContent(t)},{name:"checklist-template.md",content:this.getChecklistTemplateContent()}];for(const e of a){const t=c.join(n,e.name),a=(new TextEncoder).encode(e.content);await r.workspace.fs.writeFile(r.Uri.file(t),a)}}async createChecklistFiles(e){const t=c.join(e,"checklists"),n=[{name:"pm-checklist.md",content:this.getPmChecklistContent()},{name:"architect-checklist.md",content:this.getArchitectChecklistContent()},{name:"security-checklist.md",content:this.getSecurityChecklistContent()}];for(const e of n){const n=c.join(t,e.name),a=(new TextEncoder).encode(e.content);await r.workspace.fs.writeFile(r.Uri.file(n),a)}}async createDataFiles(e){const t=c.join(e,"data"),n=[{name:"bmad-kb.md",content:this.getBmadKnowledgeBaseContent()}];for(const e of n){const n=c.join(t,e.name),a=(new TextEncoder).encode(e.content);await r.workspace.fs.writeFile(r.Uri.file(n),a)}}async generateConfiguration(e,t){const n={projectType:t.type,framework:t.framework,language:t.language,complexity:t.complexity,recommendedMode:t.recommendedMode,recommendedAgents:t.recommendedAgents,autoActivateAgents:!0,enableRealTimeMonitoring:!0,features:{hasDatabase:t.hasDatabase,hasAuthentication:t.hasAuthentication,hasFrontend:t.hasFrontend,hasBackend:t.hasBackend,hasDocker:t.hasDocker,hasKubernetes:t.hasKubernetes,hasTests:t.hasTests,hasCICD:t.hasCICD},dependencies:t.dependencies,confidence:t.confidence,createdAt:(new Date).toISOString(),version:"1.0.0"},a=c.join(e,"bmad-config.json"),o=(new TextEncoder).encode(JSON.stringify(n,null,2));await r.workspace.fs.writeFile(r.Uri.file(a),o)}async createIdeOrchestratorConfig(e,t){const n=this.getIdeOrchestratorConfigContent(t),a=c.join(e,"ide-bmad-orchestrator.cfg.md"),o=(new TextEncoder).encode(n);await r.workspace.fs.writeFile(r.Uri.file(a),o)}async configureWorkspaceSettings(e,t){const n=r.workspace.getConfiguration("bmad",e);await n.update("defaultMode",t.recommendedMode,r.ConfigurationTarget.Workspace),await n.update("autoActivateRecommendedAgents",!0,r.ConfigurationTarget.Workspace),"complex"!==t.complexity&&"enterprise"!==t.complexity||(await n.update("enableRealTimeMonitoring",!0,r.ConfigurationTarget.Workspace),await n.update("debugModeThreshold",3,r.ConfigurationTarget.Workspace))}async validateExistingSetup(e){const t=["personas","tasks","templates","checklists","data"],n=[];for(const a of t)try{const t=c.join(e,a);await r.workspace.fs.stat(r.Uri.file(t))}catch{n.push(a)}if(n.length>0&&"Repair Setup"===await r.window.showWarningMessage(`BMAD setup is incomplete. Missing folders: ${n.join(", ")}. Would you like to repair it?`,"Repair Setup","Ignore"))for(const t of n){const n=c.join(e,t);await r.workspace.fs.createDirectory(r.Uri.file(n))}}async showInitializationSuccess(e){const t=`BMAD initialized successfully! Detected: ${e.framework} ${e.type} project. Recommended mode: ${e.recommendedMode}`,n=await r.window.showInformationMessage(t,"Activate Recommended Mode","Select Agents","OK");"Activate Recommended Mode"===n?await r.commands.executeCommand(`bmad.activate${e.recommendedMode.charAt(0).toUpperCase()+e.recommendedMode.slice(1)}Mode`):"Select Agents"===n&&await r.commands.executeCommand("bmad.selectAgents")}getBmadPersonaContent(){return"# Role: BMad - AI Agent Orchestrator\n\n## Core Principles\n1. Orchestrate AI agent selection and activation\n2. Provide guidance on the BMAD Method\n3. Coordinate collaborative intelligence workflows\n4. Maintain project context and continuity\n\n## Responsibilities\n- Mode selection and workflow orchestration\n- Agent coordination and handoffs\n- Progress tracking and status updates\n- Quality assurance and validation\n"}getPmPersonaContent(){return"# Role: Product Manager (John)\n\n## Core Principles\n1. Represent end user needs and business value\n2. Define clear product requirements and specifications\n3. Prioritize features based on user impact\n4. Ensure product-market fit and viability\n\n## Responsibilities\n- Product Requirements Document (PRD) creation\n- Feature prioritization and roadmap planning\n- Stakeholder communication and alignment\n- User story definition and acceptance criteria\n"}getArchitectPersonaContent(){return"# Role: Architect (Fred)\n\n## Core Principles\n1. Design scalable and maintainable system architecture\n2. Make informed technology decisions\n3. Ensure non-functional requirements are met\n4. Balance technical excellence with business needs\n\n## Responsibilities\n- System architecture design and documentation\n- Technology stack selection and evaluation\n- Technical risk assessment and mitigation\n- Code quality standards and best practices\n"}getDesignArchitectPersonaContent(){return"# Role: Design Architect (Jane)\n\n## Core Principles\n1. Create intuitive and accessible user experiences\n2. Design consistent and scalable UI components\n3. Ensure responsive and performant interfaces\n4. Align design with business objectives\n\n## Responsibilities\n- UI/UX specification and design systems\n- Frontend architecture and component design\n- Accessibility and usability standards\n- Design-development collaboration\n"}getSecurityEngineerPersonaContent(){return"# Role: Security Engineer (Sage)\n\n## Core Principles\n1. Implement security by design principles\n2. Identify and mitigate security vulnerabilities\n3. Ensure compliance with security standards\n4. Protect user data and system integrity\n\n## Responsibilities\n- Security architecture review and assessment\n- Vulnerability scanning and penetration testing\n- Security policy and procedure development\n- Incident response and threat analysis\n"}getPlatformEngineerPersonaContent(){return"# Role: Platform Engineer (Alex)\n\n## Core Principles\n1. Build reliable and scalable infrastructure\n2. Automate deployment and operations\n3. Ensure high availability and performance\n4. Optimize costs and resource utilization\n\n## Responsibilities\n- Infrastructure architecture and automation\n- CI/CD pipeline design and implementation\n- Monitoring and observability setup\n- Disaster recovery and backup strategies\n"}getTaskBreakdownSpecialistPersonaContent(){return"# Role: Task Breakdown Specialist (Tyler)\n\n## Core Principles\n1. Break complex work into manageable tasks\n2. Organize workflows for optimal efficiency\n3. Track progress and identify blockers\n4. Facilitate team coordination and handoffs\n\n## Responsibilities\n- Epic and story breakdown and estimation\n- Task dependency mapping and scheduling\n- Progress tracking and status reporting\n- Workflow optimization and improvement\n"}getTechnicalWriterPersonaContent(){return"# Role: Technical Writer (Taylor)\n\n## Core Principles\n1. Create clear and comprehensive documentation\n2. Ensure information accessibility and usability\n3. Maintain documentation quality and consistency\n4. Support developer onboarding and productivity\n\n## Responsibilities\n- Technical documentation creation and maintenance\n- API documentation and developer guides\n- README and repository documentation\n- Documentation standards and style guides\n"}getDocumentationModeTaskContent(){return"# Documentation Mode Workflow\n\n## Purpose\nGenerate 3 complete handoff documents through collaborative AI agent intelligence.\n\n## Deliverables\n- prd.md - Product Requirements Document\n- architecture.md - Technical Architecture Document  \n- checklist.md - Development Checklist\n\n## Workflow\n1. Project Analysis & Agent Activation\n2. Collaborative PRD Development\n3. Collaborative Architecture Development\n4. Collaborative Development Checklist\n5. Final Validation & Handoff\n"}getContinueProjectTaskContent(){return"# Continue Existing Project Workflow\n\n## Purpose\nResume work on interrupted projects with full context restoration.\n\n## Workflow\n1. Comprehensive Workspace Analysis\n2. Task Management Analysis\n3. Project Resume Summary Generation\n4. Continuation Point Selection\n5. AI Agent Reactivation\n6. Execution Resumption\n"}getTaskOverviewTaskContent(){return"# Task List Overview Workflow\n\n## Purpose\nProvide comprehensive project status dashboard and task management.\n\n## Workflow\n1. Comprehensive Task Analysis\n2. Project Status Dashboard Generation\n3. Task Complexity and Effort Analysis\n4. Priority and Risk Assessment\n5. Interactive Task Management\n6. Reporting and Export\n"}getDebugTaskContent(){return"# Debug & Troubleshoot Workflow\n\n## Purpose\nSystematic issue diagnosis and resolution through specialist AI collaboration.\n\n## Workflow\n1. Comprehensive Project Health Diagnostics\n2. Issue Classification and Severity Assessment\n3. Security Vulnerability Scanning\n4. Specialist AI Agent Consultation\n5. Automated Analysis and Testing\n6. Issue Resolution Planning\n7. Interactive Debugging Support\n"}getPrdTemplateContent(){return"# Product Requirements Document\n\n## Project Overview\n[Project description and objectives]\n\n## User Stories\n[User stories and acceptance criteria]\n\n## Technical Requirements\n[Technical specifications and constraints]\n\n## Success Metrics\n[Key performance indicators and success criteria]\n"}getArchitectureTemplateContent(e){return`# Technical Architecture Document\n\n## System Overview\nProject Type: ${e.type}\nFramework: ${e.framework}\nLanguage: ${e.language}\n\n## Architecture Decisions\n[Key architectural decisions and rationale]\n\n## Technology Stack\n[Selected technologies and justification]\n\n## System Design\n[High-level system design and components]\n\n## Implementation Plan\n[Development approach and milestones]\n`}getChecklistTemplateContent(){return"# Development Checklist\n\n## Planning Phase\n- [ ] Requirements analysis complete\n- [ ] Architecture design approved\n- [ ] Technology stack selected\n\n## Development Phase\n- [ ] Core functionality implemented\n- [ ] Testing framework setup\n- [ ] Security measures implemented\n\n## Deployment Phase\n- [ ] Production environment configured\n- [ ] Monitoring and logging setup\n- [ ] Documentation complete\n"}getPmChecklistContent(){return"# Product Manager Checklist\n\n## Requirements Gathering\n- [ ] Stakeholder interviews conducted\n- [ ] User personas defined\n- [ ] Use cases documented\n\n## PRD Development\n- [ ] Business objectives defined\n- [ ] Success metrics established\n- [ ] Technical requirements specified\n"}getArchitectChecklistContent(){return"# Architect Checklist\n\n## Architecture Design\n- [ ] System architecture documented\n- [ ] Technology decisions justified\n- [ ] Non-functional requirements addressed\n\n## Technical Review\n- [ ] Security considerations evaluated\n- [ ] Performance requirements defined\n- [ ] Scalability plan established\n"}getSecurityChecklistContent(){return"# Security Checklist\n\n## Security Assessment\n- [ ] Threat model created\n- [ ] Vulnerability assessment completed\n- [ ] Security controls implemented\n\n## Compliance Review\n- [ ] Regulatory requirements reviewed\n- [ ] Data protection measures implemented\n- [ ] Security policies documented\n"}getBmadKnowledgeBaseContent(){return"# BMAD Knowledge Base\n\n## BMAD Method Overview\nThe Breakthrough Method of Agile (AI-driven) Development (BMAD) is a comprehensive framework for managing software projects using collaborative AI agents.\n\n## Core Principles\n1. Collaborative Intelligence\n2. Iterative Development\n3. Quality Assurance\n4. Continuous Improvement\n\n## AI Agent Roles\n- Product Manager (John): Requirements and planning\n- Architect (Fred): Technical design and architecture\n- Design Architect (Jane): UI/UX and frontend\n- Security Engineer (Sage): Security and compliance\n- Platform Engineer (Alex): Infrastructure and DevOps\n- Task Breakdown Specialist (Tyler): Task management\n- Technical Writer (Taylor): Documentation\n"}getIdeOrchestratorConfigContent(e){return"# Configuration for IDE Agents\n\n## Data Resolution\nagent-root: (project-root)/bmad-agent\nchecklists: (agent-root)/checklists\ndata: (agent-root)/data\npersonas: (agent-root)/personas\ntasks: (agent-root)/tasks\ntemplates: (agent-root)/templates\n\n## Agent Definitions\n\n### Product Manager\n- Name: John\n- Description: Product requirements and planning\n- Persona: pm.md\n- Tasks: [Create PRD], [Correct Course]\n\n### Architect  \n- Name: Fred\n- Description: System architecture and technical design\n- Persona: architect.md\n- Tasks: [Create Architecture], [Technical Review]\n\n### Design Architect\n- Name: Jane\n- Description: UI/UX and frontend architecture\n- Persona: design-architect.md\n- Tasks: [Create Frontend Architecture], [UI Specification]\n"}}},144:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.initializer=t.configManager=t.monitor=t.statusBar=t.commandManager=t.analyzer=t.orchestrator=void 0,t.activate=async function(e){console.log("BMAD AI Agent Orchestrator is now active!");try{t.configManager=D=new m.ConfigurationManager,t.analyzer=y=new d.WorkspaceAnalyzer,t.statusBar=k=new u.StatusBarManager,t.initializer=M=new g.BMadInitializer(y),t.orchestrator=w=new c.BMadOrchestrator(e,y,k,M),t.commandManager=b=new l.CommandManager(w,y,k),t.monitor=v=new h.WorkspaceMonitor(y,w,k),A=new p.AugmentIntegration(w,y,k),C=new f.AugmentMenuIntegration(w,y),await b.registerCommands(e),k.initialize(),await r.commands.executeCommand("setContext","bmadEnabled",!0);const n=D.getConfiguration();n.autoInitialize&&r.workspace.workspaceFolders&&await async function(){if(r.workspace.workspaceFolders)for(const e of r.workspace.workspaceFolders)try{await M.checkIfInitializationNeeded(e)&&await M.initializeWorkspace(e)}catch(t){console.error(`Failed to auto-initialize workspace ${e.name}:`,t)}}(),n.enableRealTimeMonitoring&&await v.startMonitoring(),await A.initialize(),await async function(e){if(!e.globalState.get("bmad.hasShownWelcome",!1)){const t=await r.window.showInformationMessage("Welcome to BMAD AI Agent Orchestrator! Would you like to see the quick start guide?",{modal:!1},"Show Guide","Quick Setup","Later");"Show Guide"===t?await r.env.openExternal(r.Uri.parse("https://github.com/bmadcode/BMAD-METHOD#readme")):"Quick Setup"===t&&await r.commands.executeCommand("bmad.autoSetup"),await e.globalState.update("bmad.hasShownWelcome",!0)}}(e),console.log("BMAD AI Agent Orchestrator activated successfully")}catch(e){console.error("Failed to activate BMAD extension:",e);const t=e instanceof Error?e.message:String(e);await r.window.showErrorMessage(`Failed to activate BMAD extension: ${t}`)}},t.deactivate=function(){console.log("BMAD AI Agent Orchestrator is now deactivated");try{v&&v.dispose(),k&&k.dispose(),D&&D.dispose(),A&&A.dispose(),C&&C.dispose()}catch(e){console.error("Error during deactivation:",e)}};const r=s(n(398)),c=n(108),d=n(355),l=n(570),u=n(488),h=n(183),m=n(735),g=n(134),p=n(733),f=n(980);let w,y,b,k,v,D,M,A,C},183:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceMonitor=void 0;const r=s(n(398));t.WorkspaceMonitor=class{analyzer;orchestrator;statusBar;fileWatcher;diagnosticWatcher;configWatcher;changeTimeout;isMonitoring=!1;lastAnalysis;constructor(e,t,n){this.analyzer=e,this.orchestrator=t,this.statusBar=n}async startMonitoring(){if(!this.isMonitoring)try{this.setupFileWatcher(),this.setupDiagnosticWatcher(),this.setupConfigurationWatcher(),this.isMonitoring=!0,console.log("BMAD workspace monitoring started")}catch(e){throw console.error("Failed to start workspace monitoring:",e),e}}stopMonitoring(){this.isMonitoring&&(this.dispose(),this.isMonitoring=!1,console.log("BMAD workspace monitoring stopped"))}isActive(){return this.isMonitoring}setupFileWatcher(){this.fileWatcher=r.workspace.createFileSystemWatcher("**/{package.json,requirements.txt,Cargo.toml,pom.xml,*.csproj,Dockerfile,docker-compose.yml,.env}"),this.fileWatcher.onDidChange(this.onConfigFileChange.bind(this)),this.fileWatcher.onDidCreate(this.onConfigFileCreate.bind(this)),this.fileWatcher.onDidDelete(this.onConfigFileDelete.bind(this))}setupDiagnosticWatcher(){this.diagnosticWatcher=r.languages.onDidChangeDiagnostics(this.onDiagnosticsChange.bind(this))}setupConfigurationWatcher(){this.configWatcher=r.workspace.onDidChangeConfiguration(e=>{e.affectsConfiguration("bmad")&&this.onBmadConfigurationChange()})}async onConfigFileChange(e){this.emitWorkspaceEvent("fileChange",{uri:e.fsPath,type:"change"}),this.changeTimeout&&clearTimeout(this.changeTimeout),this.changeTimeout=setTimeout(async()=>{try{await this.analyzeProjectChanges(e)}catch(e){console.error("Failed to analyze project changes:",e)}},1e3)}async onConfigFileCreate(e){this.emitWorkspaceEvent("fileChange",{uri:e.fsPath,type:"create"});const t=e.fsPath.split("/").pop()||"";["package.json","requirements.txt","Dockerfile"].includes(t)&&"Re-analyze"===await r.window.showInformationMessage(`New ${t} detected. Would you like to re-analyze the project?`,"Re-analyze","Later")&&await this.analyzeProjectChanges(e)}async onConfigFileDelete(e){this.emitWorkspaceEvent("fileChange",{uri:e.fsPath,type:"delete"});const t=e.fsPath.split("/").pop()||"";["package.json","requirements.txt"].includes(t)&&r.window.showWarningMessage(`Important file ${t} was deleted. This may affect project analysis.`)}async onDiagnosticsChange(e){this.emitWorkspaceEvent("diagnosticChange",{changedUris:e.uris.map(e=>e.fsPath)});const t=r.languages.getDiagnostics(),n=this.processDiagnostics(t);this.statusBar.updateIssues(n);const a=n.filter(e=>"critical"===e.severity),o=r.workspace.getConfiguration("bmad").get("debugModeThreshold",5);a.length>=o&&await this.suggestDebugMode(a)}onBmadConfigurationChange(){this.emitWorkspaceEvent("configChange",{section:"bmad",timestamp:(new Date).toISOString()}),r.workspace.getConfiguration("bmad").get("enableRealTimeMonitoring",!0)||this.stopMonitoring(),console.log("BMAD configuration updated")}async analyzeProjectChanges(e){try{if(this.lastAnalysis&&Date.now()-this.lastAnalysis.getTime()<5e3)return;this.lastAnalysis=new Date;const e=await this.analyzer.analyzeWorkspace(),t=this.orchestrator.getCurrentMode(),n=e.projectAnalysis.recommendedMode;t&&t!==n&&await this.suggestModeChange(t,n);const a=this.orchestrator.getActiveAgents(),o=e.projectAnalysis.recommendedAgents.filter(e=>!a.includes(e));o.length>0&&await this.suggestNewAgents(o)}catch(e){console.error("Failed to analyze project changes:",e)}}async suggestDebugMode(e){if(!r.workspace.getConfiguration("bmad").get("intelligentRecommendations",!0))return;const t=await r.window.showWarningMessage(`${e.length} critical issues detected. Activate Debug & Troubleshoot mode?`,"Activate Debug Mode","Show Issues","Dismiss");"Activate Debug Mode"===t?(await r.commands.executeCommand("bmad.debugMode"),this.emitWorkspaceEvent("diagnosticChange",["debug-mode-activated"])):"Show Issues"===t&&await r.commands.executeCommand("workbench.actions.view.problems")}async suggestModeChange(e,t){const n=r.workspace.getConfiguration("bmad");if(!n.get("intelligentRecommendations",!0))return;const a=await r.window.showInformationMessage(`Project changes detected. Consider switching from ${e} to ${t} mode?`,"Switch Mode","Keep Current","Don't Ask Again");"Switch Mode"===a?(await r.commands.executeCommand(`bmad.activate${t.charAt(0).toUpperCase()+t.slice(1)}Mode`),this.emitWorkspaceEvent("configChange",["mode-switched",e,t])):"Don't Ask Again"===a&&await n.update("intelligentRecommendations",!1,r.ConfigurationTarget.Workspace)}async suggestNewAgents(e){if(!r.workspace.getConfiguration("bmad").get("intelligentRecommendations",!0))return;const t=e.map(e=>this.getAgentDisplayName(e)).join(", "),n=await r.window.showInformationMessage(`New agents recommended based on project changes: ${t}`,"Activate Agents","Review Agents","Ignore");if("Activate Agents"===n){const t=this.orchestrator.getActiveAgents(),n=e;await this.orchestrator.activateAgents([...t,...n]),this.emitWorkspaceEvent("configChange",["agents-added",...e])}else"Review Agents"===n&&await r.commands.executeCommand("bmad.selectAgents")}processDiagnostics(e){const t=[];for(const[n,a]of e)for(const e of a){let a;switch(e.severity){case r.DiagnosticSeverity.Error:a="critical";break;case r.DiagnosticSeverity.Warning:a="high";break;case r.DiagnosticSeverity.Information:a="medium";break;case r.DiagnosticSeverity.Hint:a="low";break;default:a="medium"}t.push({severity:a,category:this.categorizeIssue(e),message:e.message,file:n.fsPath,line:e.range.start.line+1,canAutoFix:void 0!==e.code})}return t}categorizeIssue(e){const t=e.message.toLowerCase();return t.includes("security")||t.includes("vulnerability")?"security":t.includes("performance")||t.includes("slow")?"performance":t.includes("dependency")||t.includes("import")?"dependency":t.includes("config")||t.includes("setting")?"configuration":"quality"}emitWorkspaceEvent(e,t){const n={type:e,timestamp:new Date,details:t,triggeredActions:[]};r.commands.executeCommand("bmad.internal.workspaceEvent",n)}getAgentDisplayName(e){return{john:"John (Product Manager)",fred:"Fred (Architect)",jane:"Jane (Design Architect)",sage:"Sage (Security Engineer)",alex:"Alex (Platform Engineer)",tyler:"Tyler (Task Breakdown Specialist)",taylor:"Taylor (Technical Writer)",sarah:"Sarah (Product Owner)",bob:"Bob (Scrum Master)"}[e]||e}dispose(){this.fileWatcher&&(this.fileWatcher.dispose(),this.fileWatcher=void 0),this.diagnosticWatcher&&(this.diagnosticWatcher.dispose(),this.diagnosticWatcher=void 0),this.configWatcher&&(this.configWatcher.dispose(),this.configWatcher=void 0),this.changeTimeout&&(clearTimeout(this.changeTimeout),this.changeTimeout=void 0)}}},203:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.DakotaAgent=void 0;const r=s(n(398)),c=s(n(896)),d=s(n(928)),l=n(102),u=n(881);t.DakotaAgent=class{context7;analyzer;statusBar;dependencyMonitor;isMonitoring=!1;constructor(e,t,n){this.analyzer=e,this.statusBar=t,this.context7=new l.Context7Integration(n),this.dependencyMonitor=new u.DependencyMonitor(this.context7,t),console.log("Dakota Agent (Dependency Modernization Specialist) initialized")}async performDependencyAudit(e){const t=e||r.workspace.workspaceFolders?.[0]?.uri.fsPath;if(!t)throw new Error("No workspace found for dependency audit");this.statusBar.showLoading("Dakota: Analyzing dependencies...");try{Date.now();const e=await this.discoverDependencies(t),n=[],a=[];for(const t of e){const e=await this.context7.securityResearch(t.name,t.currentVersion,t.ecosystem);if(e){n.push(e);const t=this.extractVulnerabilitiesFromResearch(e);a.push(...t)}const o=await this.generateUpdateRecommendation(t);t.updateRecommendation=o}const o=this.calculateHealthScore(e,a),i=e.filter(e=>e.updateRecommendation).map(e=>e.updateRecommendation).sort((e,t)=>this.prioritizeRecommendations(e,t)),s={projectPath:t,timestamp:new Date,totalDependencies:e.length,vulnerabilities:a,outdatedPackages:e.filter(e=>e.latestVersion&&e.currentVersion!==e.latestVersion),recommendations:i,healthScore:o,context7Insights:n};return this.statusBar.showSuccess(`Dakota: Audit complete - ${e.length} dependencies analyzed`),await this.generateAuditReport(s),s}catch(e){throw this.statusBar.showError(`Dakota: Audit failed - ${e}`),e}}async performDependencyModernization(e){this.statusBar.showLoading("Dakota: Modernizing dependencies...");try{const t=e.recommendations.filter(e=>"auto-update"===e.action),n=e.recommendations.filter(e=>"manual-review"===e.action);for(const e of t)await this.executeAutomaticUpdate(e);n.length>0&&await this.presentManualReviews(n),this.statusBar.showSuccess(`Dakota: Modernization complete - ${t.length} auto-updates, ${n.length} manual reviews`)}catch(e){throw this.statusBar.showError(`Dakota: Modernization failed - ${e}`),e}}async startDependencyMonitoring(){this.isMonitoring||(this.isMonitoring=!0,await this.dependencyMonitor.startMonitoring(),this.statusBar.showInfo("Dakota: Background monitoring started"))}stopDependencyMonitoring(){this.dependencyMonitor.stopMonitoring(),this.isMonitoring=!1,this.statusBar.showInfo("Dakota: Background monitoring stopped")}async discoverDependencies(e){const t=[],n=[{file:"package.json",ecosystem:"npm"},{file:"requirements.txt",ecosystem:"pip"},{file:"pyproject.toml",ecosystem:"poetry"},{file:"Cargo.toml",ecosystem:"cargo"},{file:"go.mod",ecosystem:"go"},{file:"pom.xml",ecosystem:"maven"},{file:"build.gradle",ecosystem:"gradle"},{file:"composer.json",ecosystem:"composer"},{file:"Gemfile",ecosystem:"bundler"}];for(const a of n){const n=d.join(e,a.file);if(c.existsSync(n)){const e=await this.parseDependencyFile(n,a.ecosystem);t.push(...e)}}return t}async parseDependencyFile(e,t){const n=[];try{const a=c.readFileSync(e,"utf8");if("npm"===t){const e=JSON.parse(a);if(e.dependencies)for(const[a,o]of Object.entries(e.dependencies))n.push({name:a,currentVersion:o,type:"production",ecosystem:t});if(e.devDependencies)for(const[a,o]of Object.entries(e.devDependencies))n.push({name:a,currentVersion:o,type:"development",ecosystem:t});if(e.peerDependencies)for(const[a,o]of Object.entries(e.peerDependencies))n.push({name:a,currentVersion:o,type:"peer",ecosystem:t})}else console.warn(`Dakota: Unsupported ecosystem ${t} for file ${e}`)}catch(t){console.error(`Dakota: Failed to parse ${e}:`,t)}return n}async generateUpdateRecommendation(e){const t=await this.getLatestVersion(e);if(e.latestVersion=t,e.currentVersion===t)return{action:"hold",reasoning:"Already at latest version",riskLevel:"low"};const n=await this.context7.updateResearch(e.name,e.currentVersion,t||"latest",e.ecosystem),a=this.analyzeVersionDifference(e.currentVersion,t||"");let o="manual-review",i="medium";return"patch"===a.type&&!a.hasBreakingChanges||"minor"===a.type&&!a.hasBreakingChanges?(o="auto-update",i="low"):"major"===a.type&&(o="manual-review",i="high"),e.vulnerabilities&&e.vulnerabilities.length>0&&e.vulnerabilities.filter(e=>"critical"===e.severity).length>0&&(o="auto-update",i="critical"),{action:o,targetVersion:t,reasoning:this.generateRecommendationReasoning(e,a,n),riskLevel:i,migrationComplexity:"major"===a.type?"complex":"simple",context7Research:n||void 0}}async getLatestVersion(e){}analyzeVersionDifference(e,t){return{type:"minor",hasBreakingChanges:!1}}generateRecommendationReasoning(e,t,n){let a=`Update ${e.name} from ${e.currentVersion} to ${e.latestVersion}. `;return n&&n.response.success&&(a+=`Context7 research indicates: ${n.response.insights?.join(", ")||"No specific concerns found"}.`),a}extractVulnerabilitiesFromResearch(e){return[]}calculateHealthScore(e,t){let n=100;n-=20*t.filter(e=>"critical"===e.severity).length+10*t.filter(e=>"high"===e.severity).length+5*t.filter(e=>"medium"===e.severity).length;const a=e.filter(e=>e.latestVersion&&e.currentVersion!==e.latestVersion).length;return n-=Math.min(30,2*a),Math.max(0,n)}prioritizeRecommendations(e,t){const n={critical:0,high:1,medium:2,low:3};return n[e.riskLevel]-n[t.riskLevel]}async executeAutomaticUpdate(e){console.log(`Dakota: Auto-updating to ${e.targetVersion}`)}async presentManualReviews(e){console.log(`Dakota: ${e.length} updates require manual review`)}async generateAuditReport(e){const t=d.join(e.projectPath,"dependency-audit-report.md");console.log(`Dakota: Audit report generated at ${t}`)}getStatus(){const e=this.dependencyMonitor.getMonitoringStatus();return{isMonitoring:this.isMonitoring,context7Available:this.context7.isIntegrationAvailable(),monitoringStats:e.stats}}dispose(){this.stopDependencyMonitoring(),this.dependencyMonitor.dispose(),this.context7.dispose()}}},355:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceAnalyzer=void 0;const r=s(n(398)),c=s(n(928));t.WorkspaceAnalyzer=class{constructor(){}async analyzeWorkspace(e){const t=e||r.workspace.workspaceFolders?.[0];if(!t)throw new Error("No workspace folder available for analysis");try{const e=await this.analyzeProject(t),n=await this.checkExistingBmadSetup(t),a=await this.generateRecommendations(e);return{projectAnalysis:e,existingBmadSetup:n.exists,bmadConfigPath:n.configPath,needsInitialization:!n.exists,recommendations:a}}catch(e){throw console.error("Workspace analysis failed:",e),new Error(`Failed to analyze workspace: ${e}`)}}async analyzeProject(e){const t=e.uri.fsPath,n=await this.readPackageJson(t),a=await this.readRequirementsTxt(t),o=await this.readCargoToml(t),i=await this.readPomXml(t),s=this.determineProjectType(n,a,o,i),r=this.detectFramework(n),c=this.detectLanguage(n,a,o,i),d=this.detectDatabase(n,a),l=this.detectAuthentication(n,a),u=this.detectFrontend(n),h=this.detectBackend(n,a),m=await this.detectDocker(t),g=await this.detectKubernetes(t),p=this.detectTests(n,a),f=await this.detectCICD(t),w=this.calculateComplexity(n,a,{hasDatabase:d,hasAuthentication:l,hasFrontend:u,hasBackend:h,hasDocker:m,hasKubernetes:g,hasTests:p,hasCICD:f});return{type:s,framework:r,language:c,complexity:w,hasDatabase:d,hasAuthentication:l,hasFrontend:u,hasBackend:h,hasDocker:m,hasKubernetes:g,hasTests:p,hasCICD:f,dependencies:this.extractDependencies(n,a),devDependencies:this.extractDevDependencies(n),recommendedMode:this.recommendMode(s,w),recommendedAgents:this.recommendAgents(s,{hasDatabase:d,hasAuthentication:l,hasFrontend:u,hasBackend:h,hasDocker:m,hasKubernetes:g}),confidence:this.calculateConfidence(s,r,c)}}async checkExistingBmadSetup(e){const t=c.join(e.uri.fsPath,"bmad-agent");try{const e=r.Uri.file(t);if((await r.workspace.fs.stat(e)).type===r.FileType.Directory){const e=c.join(t,"bmad-config.json");try{return await r.workspace.fs.stat(r.Uri.file(e)),{exists:!0,configPath:e}}catch{return{exists:!0}}}}catch{}return{exists:!1}}async generateRecommendations(e){return{mode:e.recommendedMode,agents:await this.generateAgentRecommendations(e),actions:this.generateActionRecommendations(e)}}async generateAgentRecommendations(e){const t=[];return t.push({agent:{id:"john",name:"John",title:"Product Manager",description:"Product requirements and planning",persona:"pm",tasks:[],specializations:["requirements","planning"]},reason:"Essential for product requirements and project planning",confidence:1,required:!0}),t.push({agent:{id:"fred",name:"Fred",title:"Architect",description:"System architecture and technical design",persona:"architect",tasks:[],specializations:["architecture","design"]},reason:"Required for technical architecture and system design",confidence:1,required:!0}),e.hasFrontend&&t.push({agent:{id:"jane",name:"Jane",title:"Design Architect",description:"UI/UX and frontend architecture",persona:"design-architect",tasks:[],specializations:["frontend","ui-ux"]},reason:"Frontend components detected - UI/UX expertise needed",confidence:.9,required:!1}),(e.hasAuthentication||e.hasDatabase)&&t.push({agent:{id:"sage",name:"Sage",title:"Security Engineer",description:"Security analysis and vulnerability assessment",persona:"security-engineer",tasks:[],specializations:["security","compliance"]},reason:"Authentication/database detected - security expertise recommended",confidence:.8,required:!1}),(e.hasDocker||e.hasKubernetes)&&t.push({agent:{id:"alex",name:"Alex",title:"Platform Engineer",description:"Infrastructure and DevOps",persona:"platform-engineer",tasks:[],specializations:["infrastructure","devops"]},reason:"Containerization/orchestration detected - infrastructure expertise needed",confidence:.85,required:!1}),"complex"!==e.complexity&&"enterprise"!==e.complexity||t.push({agent:{id:"tyler",name:"Tyler",title:"Task Breakdown Specialist",description:"Task management and workflow organization",persona:"task-breakdown-specialist",tasks:[],specializations:["task-management","workflow"]},reason:"Complex project detected - task breakdown expertise recommended",confidence:.75,required:!1}),t}generateActionRecommendations(e){const t=[];return e.confidence<.7&&t.push("Review project structure manually for better analysis"),e.hasTests||t.push("Consider adding testing framework"),e.hasCICD||t.push("Set up CI/CD pipeline for automated deployment"),e.hasAuthentication&&!e.dependencies.some(e=>e.includes("security")||e.includes("auth")||e.includes("jwt"))&&t.push("Review security dependencies and authentication setup"),t}async readPackageJson(e){try{const t=c.join(e,"package.json"),n=r.Uri.file(t),a=await r.workspace.fs.readFile(n),o=(new TextDecoder).decode(a);return JSON.parse(o)}catch{return null}}async readRequirementsTxt(e){try{const t=c.join(e,"requirements.txt"),n=r.Uri.file(t),a=await r.workspace.fs.readFile(n);return(new TextDecoder).decode(a).split("\n").filter(e=>e.trim())}catch{return[]}}async readCargoToml(e){try{const t=c.join(e,"Cargo.toml"),n=r.Uri.file(t),a=await r.workspace.fs.readFile(n);return{exists:!0,content:(new TextDecoder).decode(a)}}catch{return null}}async readPomXml(e){try{const t=c.join(e,"pom.xml"),n=r.Uri.file(t),a=await r.workspace.fs.readFile(n);return{exists:!0,content:(new TextDecoder).decode(a)}}catch{return null}}detectDatabase(e,t){if(e){const t={...e.dependencies,...e.devDependencies};return["mongoose","sequelize","typeorm","prisma","pg","mysql","sqlite3"].some(e=>t[e])}return t.some(e=>e.includes("django")||e.includes("sqlalchemy")||e.includes("psycopg2"))}detectAuthentication(e,t){if(e){const t={...e.dependencies,...e.devDependencies};return["passport","jsonwebtoken","bcrypt","auth0","firebase-auth"].some(e=>t[e])}return t.some(e=>e.includes("django-auth")||e.includes("flask-login")||e.includes("jwt"))}detectFrontend(e){if(!e)return!1;const t={...e.dependencies,...e.devDependencies};return["react","vue","angular","@angular/core","svelte"].some(e=>t[e])}detectBackend(e,t){if(e){const t={...e.dependencies,...e.devDependencies};if(["express","fastify","@nestjs/core","koa"].some(e=>t[e]))return!0}return t.some(e=>e.includes("django")||e.includes("flask")||e.includes("fastapi"))}async detectDocker(e){try{const t=c.join(e,"Dockerfile");return await r.workspace.fs.stat(r.Uri.file(t)),!0}catch{return!1}}async detectKubernetes(e){try{const t=c.join(e,"k8s");return await r.workspace.fs.stat(r.Uri.file(t)),!0}catch{return!1}}detectTests(e,t){if(e){const t={...e.dependencies,...e.devDependencies};if(["jest","mocha","chai","cypress","playwright","@testing-library"].some(e=>t[e]||Object.keys(t).some(t=>t.includes(e))))return!0}return t.some(e=>e.includes("pytest")||e.includes("unittest")||e.includes("nose"))}async detectCICD(e){const t=[".github/workflows",".gitlab-ci.yml","azure-pipelines.yml","Jenkinsfile"];for(const n of t)try{const t=c.join(e,n);return await r.workspace.fs.stat(r.Uri.file(t)),!0}catch{}return!1}calculateComplexity(e,t,n){let a=0;if(e){const t=Object.keys(e.dependencies||{}).length+Object.keys(e.devDependencies||{}).length;a+=Math.min(t/10,3)}return a+=t.length/5,n.hasDatabase&&(a+=1),n.hasAuthentication&&(a+=1),n.hasFrontend&&n.hasBackend&&(a+=2),n.hasDocker&&(a+=1),n.hasKubernetes&&(a+=2),n.hasTests&&(a+=.5),n.hasCICD&&(a+=1),a<2?"simple":a<5?"moderate":a<8?"complex":"enterprise"}extractDependencies(e,t){const n=[];return e?.dependencies&&n.push(...Object.keys(e.dependencies)),n.push(...t.map(e=>e.split("==")[0].split(">=")[0].trim())),n}extractDevDependencies(e){return e?.devDependencies?Object.keys(e.devDependencies):[]}recommendMode(e,t){return"simple"===t||"moderate"===t?"documentation":"complex"===t||"enterprise"===t?"fullDevelopment":"documentation"}recommendAgents(e,t){const n=["john","fred"];return t.hasFrontend&&n.push("jane"),(t.hasAuthentication||t.hasDatabase)&&n.push("sage"),(t.hasDocker||t.hasKubernetes)&&n.push("alex"),n}calculateConfidence(e,t,n){let a=.5;return"unknown"!==e&&(a+=.3),"Unknown"!==t&&(a+=.2),"Unknown"!==n&&(a+=.1),Math.min(a,1)}determineProjectType(e,t,n,a){if(e){const t={...e.dependencies,...e.devDependencies};if(t.react)return t.express||t.fastify||t["@nestjs/core"]?"fullstack-web":"react-frontend";if(t.vue)return"vue-frontend";if(t["@angular/core"])return"angular-frontend";if(t.express||t.fastify||t["@nestjs/core"])return"nodejs-api";if(t["react-native"]||t["@react-native-community/cli"])return"mobile-app";if(t.electron||t["@tauri-apps/api"])return"desktop-app"}if(t.length>0){const e=t.join(" ").toLowerCase();if(e.includes("django")||e.includes("flask")||e.includes("fastapi"))return"python-api"}return n?"rust-api":a?"nodejs-api":"unknown"}detectFramework(e){if(!e)return"Unknown";const t={...e.dependencies,...e.devDependencies};return t.react?"React":t.vue?"Vue":t["@angular/core"]?"Angular":t.svelte?"Svelte":t.express?"Express":t.fastify?"Fastify":t["@nestjs/core"]?"NestJS":t["react-native"]?"React Native":t.electron?"Electron":"Unknown"}detectLanguage(e,t,n,a){if(e){const t={...e.dependencies,...e.devDependencies};return t.typescript||t["@types/node"]?"TypeScript":"JavaScript"}return t.length>0?"Python":n?"Rust":a?"Java":"Unknown"}}},398:e=>{e.exports=require("vscode")},488:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.StatusBarManager=void 0;const r=s(n(398));t.StatusBarManager=class{statusBarItem;progressItem;issueItem;currentInfo;constructor(){this.statusBarItem=r.window.createStatusBarItem(r.StatusBarAlignment.Left,100),this.progressItem=r.window.createStatusBarItem(r.StatusBarAlignment.Left,99),this.issueItem=r.window.createStatusBarItem(r.StatusBarAlignment.Left,98),this.currentInfo={activeAgents:[],lastUpdate:new Date}}initialize(){this.statusBarItem.text="$(robot) BMAD: Ready",this.statusBarItem.tooltip="BMAD AI Agent Orchestrator - Click to select mode",this.statusBarItem.command="bmad.quickModeSelect",this.statusBarItem.show(),console.log("BMAD Status Bar initialized")}updateMode(e,t=[]){this.currentInfo.mode=e,this.currentInfo.activeAgents=t,this.currentInfo.lastUpdate=new Date;const n=this.getModeDisplayName(e),a=t.map(e=>this.getAgentDisplayName(e)).join(", ");this.statusBarItem.text=`$(robot) BMAD: ${n}`,this.statusBarItem.tooltip=this.buildModeTooltip(e,t),this.statusBarItem.command="bmad.showModeDetails",this.statusBarItem.backgroundColor=void 0,this.statusBarItem.show(),r.workspace.getConfiguration("bmad").get("progressNotifications",!0)&&r.window.showInformationMessage(`BMAD ${n} mode activated${t.length>0?` with agents: ${a}`:""}`)}updateProgress(e){this.currentInfo.progress=e,this.currentInfo.lastUpdate=new Date,e.progress>0&&e.progress<100?(this.progressItem.text=`$(sync~spin) ${e.phase} (${e.progress}%)`,this.progressItem.tooltip=this.buildProgressTooltip(e),this.progressItem.command="bmad.showProgress",this.progressItem.show()):e.progress>=100?(this.progressItem.text=`$(check) ${e.phase} Complete`,this.progressItem.tooltip="Workflow completed successfully",this.progressItem.command="bmad.showProgress",setTimeout(()=>{this.progressItem.hide()},5e3)):this.progressItem.hide()}updateIssues(e){if(this.currentInfo.issues=e,this.currentInfo.lastUpdate=new Date,0===e.length)return void this.issueItem.hide();const t=e.filter(e=>"critical"===e.severity),n=e.filter(e=>"high"===e.severity);t.length>0?(this.issueItem.text=`$(error) ${t.length} Critical`,this.issueItem.tooltip=this.buildIssueTooltip(e),this.issueItem.backgroundColor=new r.ThemeColor("statusBarItem.errorBackground")):n.length>0?(this.issueItem.text=`$(warning) ${n.length} High`,this.issueItem.tooltip=this.buildIssueTooltip(e),this.issueItem.backgroundColor=new r.ThemeColor("statusBarItem.warningBackground")):(this.issueItem.text=`$(info) ${e.length} Issues`,this.issueItem.tooltip=this.buildIssueTooltip(e),this.issueItem.backgroundColor=void 0),this.issueItem.command="bmad.debugMode",this.issueItem.show()}showError(e,t){this.statusBarItem.text="$(error) BMAD: Error",this.statusBarItem.tooltip=`Error: ${e}\nClick for details`,this.statusBarItem.command=t||"bmad.showErrorDetails",this.statusBarItem.backgroundColor=new r.ThemeColor("statusBarItem.errorBackground"),this.statusBarItem.show(),r.window.showErrorMessage(`BMAD Error: ${e}`,"Show Details").then(e=>{"Show Details"===e&&t&&r.commands.executeCommand(t)})}showLoading(e){this.statusBarItem.text=`$(sync~spin) BMAD: ${e}`,this.statusBarItem.tooltip=`BMAD is ${e.toLowerCase()}...`,this.statusBarItem.command=void 0,this.statusBarItem.backgroundColor=void 0,this.statusBarItem.show()}showSuccess(e,t){this.statusBarItem.text="$(check) BMAD: Success",this.statusBarItem.tooltip=`Success: ${e}\nClick for details`,this.statusBarItem.command=t||"bmad.quickModeSelect",this.statusBarItem.backgroundColor=void 0,this.statusBarItem.show(),r.window.showInformationMessage(`BMAD: ${e}`),setTimeout(()=>{this.statusBarItem.text="$(robot) BMAD: Ready",this.statusBarItem.tooltip="BMAD AI Agent Orchestrator - Click to select mode",this.statusBarItem.command="bmad.quickModeSelect"},5e3)}showInfo(e,t){this.statusBarItem.text="$(info) BMAD: Info",this.statusBarItem.tooltip=`Info: ${e}\nClick for details`,this.statusBarItem.command=t||"bmad.quickModeSelect",this.statusBarItem.backgroundColor=void 0,this.statusBarItem.show(),r.window.showInformationMessage(`BMAD: ${e}`),setTimeout(()=>{this.statusBarItem.text="$(robot) BMAD: Ready",this.statusBarItem.tooltip="BMAD AI Agent Orchestrator - Click to select mode",this.statusBarItem.command="bmad.quickModeSelect"},3e3)}clear(){this.statusBarItem.hide(),this.progressItem.hide(),this.issueItem.hide()}getCurrentInfo(){return{...this.currentInfo}}dispose(){this.statusBarItem.dispose(),this.progressItem.dispose(),this.issueItem.dispose()}getModeDisplayName(e){return{documentation:"Documentation",fullDevelopment:"Full Development",continueProject:"Continue Project",taskOverview:"Task Overview",debugMode:"Debug & Troubleshoot",continuousExecution:"Continuous Execution",featureGapAnalysis:"Feature Gap Analysis",githubIntegration:"GitHub Integration"}[e]||e}getAgentDisplayName(e){return{john:"John (PM)",fred:"Fred (Architect)",jane:"Jane (Design)",sage:"Sage (Security)",alex:"Alex (Platform)",tyler:"Tyler (Tasks)",taylor:"Taylor (Writer)",sarah:"Sarah (PO)",bob:"Bob (SM)",dakota:"Dakota (Dependencies)"}[e]||e}buildModeTooltip(e,t){const n=this.getModeDescription(e),a=t.length>0?`\n\nActive Agents:\n${t.map(e=>`• ${this.getAgentDisplayName(e)}`).join("\n")}`:"";return`BMAD AI Agent Orchestrator\n\nMode: ${this.getModeDisplayName(e)}\n${n}${a}\n\nClick to view mode details`}buildProgressTooltip(e){const t=e.estimatedTimeRemaining?`\nEstimated time remaining: ${Math.round(e.estimatedTimeRemaining/60)} minutes`:"",n=e.currentAgent?`\nCurrent agent: ${this.getAgentDisplayName(e.currentAgent)}`:"",a=e.completedTasks.length>0?`\n\nCompleted tasks:\n${e.completedTasks.map(e=>`• ${e}`).join("\n")}`:"";return`BMAD Workflow Progress\n\nPhase: ${e.phase}\nProgress: ${e.progress}%${t}${n}${a}\n\nClick for detailed progress view`}buildIssueTooltip(e){const t=e.reduce((e,t)=>(e[t.severity]=(e[t.severity]||0)+1,e),{});return`Project Issues Detected\n\nSummary: ${Object.entries(t).map(([e,t])=>`${t} ${e}`).join(", ")}\n\nRecent issues:\n${e.slice(0,3).map(e=>`• ${e.severity.toUpperCase()}: ${e.message}`).join("\n")}\n\nClick to activate Debug & Troubleshoot mode`}getModeDescription(e){return{documentation:"Generate comprehensive project documentation",fullDevelopment:"Complete application development workflow",continueProject:"Resume interrupted project work",taskOverview:"Project status dashboard and task management",debugMode:"Systematic issue diagnosis and resolution",continuousExecution:"Autonomous workflow execution",featureGapAnalysis:"Analyze missing features and improvements",githubIntegration:"GitHub repository documentation and workflow"}[e]||"BMAD workflow mode"}}},570:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.CommandManager=void 0;const r=s(n(398)),c=n(203);t.CommandManager=class{orchestrator;analyzer;statusBar;dakotaAgent;constructor(e,t,n){this.orchestrator=e,this.analyzer=t,this.statusBar=n,this.dakotaAgent=new c.DakotaAgent(t,n)}async registerCommands(e){const t=[r.commands.registerCommand("bmad.activateDocumentationMode",()=>this.activateMode("documentation")),r.commands.registerCommand("bmad.activateFullDevelopmentMode",()=>this.activateMode("fullDevelopment")),r.commands.registerCommand("bmad.continueProject",()=>this.activateMode("continueProject")),r.commands.registerCommand("bmad.taskOverview",()=>this.activateMode("taskOverview")),r.commands.registerCommand("bmad.debugMode",()=>this.activateMode("debugMode")),r.commands.registerCommand("bmad.continuousExecution",()=>this.activateMode("continuousExecution")),r.commands.registerCommand("bmad.featureGapAnalysis",()=>this.activateMode("featureGapAnalysis")),r.commands.registerCommand("bmad.githubIntegration",()=>this.activateMode("githubIntegration")),r.commands.registerCommand("bmad.quickModeSelect",()=>this.showQuickModeSelector()),r.commands.registerCommand("bmad.scanWorkspace",()=>this.scanWorkspace()),r.commands.registerCommand("bmad.autoSetup",()=>this.autoSetup()),r.commands.registerCommand("bmad.detectStack",()=>this.detectTechStack()),r.commands.registerCommand("bmad.selectAgents",()=>this.showAgentSelector()),r.commands.registerCommand("bmad.agentHandoff",()=>this.performAgentHandoff()),r.commands.registerCommand("bmad.healthCheck",()=>this.performHealthCheck()),r.commands.registerCommand("bmad.showProgress",()=>this.showProgressDetails()),r.commands.registerCommand("bmad.showModeDetails",()=>this.showModeDetails()),r.commands.registerCommand("bmad.showErrorDetails",()=>this.showErrorDetails()),r.commands.registerCommand("bmad.debugCurrentFile",()=>this.debugCurrentFile()),r.commands.registerCommand("bmad.documentCurrentFile",()=>this.documentCurrentFile()),r.commands.registerCommand("bmad.debugSelection",()=>this.debugSelection()),r.commands.registerCommand("bmad.explainCode",()=>this.explainCode()),r.commands.registerCommand("bmad.generateTests",()=>this.generateTests()),r.commands.registerCommand("bmad.analyzeFolder",()=>this.analyzeFolder()),r.commands.registerCommand("bmad.generateDocsForFolder",()=>this.generateDocsForFolder()),r.commands.registerCommand("bmad.refreshAnalysis",()=>this.refreshAnalysis()),r.commands.registerCommand("bmad.openSettings",()=>this.openSettings()),r.commands.registerCommand("bmad.showHelp",()=>this.showHelp()),r.commands.registerCommand("bmad.dependencyAudit",()=>this.performDependencyAudit()),r.commands.registerCommand("bmad.dependencyModernization",()=>this.performDependencyModernization()),r.commands.registerCommand("bmad.startDependencyMonitoring",()=>this.startDependencyMonitoring()),r.commands.registerCommand("bmad.stopDependencyMonitoring",()=>this.stopDependencyMonitoring()),r.commands.registerCommand("bmad.checkSecurityVulnerabilities",()=>this.checkSecurityVulnerabilities()),r.commands.registerCommand("bmad.updateOutdatedDependencies",()=>this.updateOutdatedDependencies()),r.commands.registerCommand("bmad.generateDependencyReport",()=>this.generateDependencyReport()),r.commands.registerCommand("bmad.analyzeDependencyLicenses",()=>this.analyzeDependencyLicenses()),r.commands.registerCommand("bmad.internal.configurationChanged",e=>this.onConfigurationChanged(e))];e.subscriptions.push(...t),console.log("BMAD commands registered successfully")}async activateMode(e){try{this.statusBar.showLoading(`Activating ${e} mode`);const t=await this.analyzer.analyzeWorkspace();this.statusBar.updateMode(e,t.projectAnalysis.recommendedAgents);const n=this.getModeDisplayName(e),a=t.projectAnalysis.recommendedAgents.map(e=>this.getAgentDisplayName(e)).join(", "),o=`BMAD ${n} mode activated${a?` with agents: ${a}`:""}`,i=await r.window.showInformationMessage(o,"Start Workflow","Select Different Agents","OK");"Start Workflow"===i?await this.orchestrator.executeMode(e,t.projectAnalysis):"Select Different Agents"===i&&await this.showAgentSelector()}catch(t){console.error(`Failed to activate ${e} mode:`,t),this.statusBar.showError(`Failed to activate ${e} mode: ${t}`)}}async showQuickModeSelector(){const e=await r.window.showQuickPick([{id:"documentation",label:"$(book) Documentation Mode",description:"Generate 3 complete handoff documents",detail:"Perfect for sending specifications to developers"},{id:"fullDevelopment",label:"$(rocket) Full Development Mode",description:"Complete application development",detail:"Build the entire project within this session"},{id:"continueProject",label:"$(debug-continue) Continue Existing Project",description:"Resume interrupted project work",detail:"Full context restoration and intelligent continuation"},{id:"taskOverview",label:"$(list-tree) Task List Overview",description:"Project status dashboard",detail:"Comprehensive task management and progress tracking"},{id:"debugMode",label:"$(debug) Debug & Troubleshoot",description:"Systematic issue diagnosis",detail:"Identify and resolve project issues"},{id:"continuousExecution",label:"$(play) Continuous Execution",description:"Autonomous workflow execution",detail:"Uninterrupted workflow progression"},{id:"featureGapAnalysis",label:"$(search) Feature Gap Analysis",description:"Analyze missing features",detail:"Comprehensive improvement recommendations"},{id:"githubIntegration",label:"$(github) GitHub Integration",description:"Repository documentation",detail:"Professional GitHub workflow management"}],{title:"Select BMAD Mode",placeHolder:"Choose a workflow mode to activate",matchOnDescription:!0,matchOnDetail:!0});e&&await this.activateMode(e.id)}async scanWorkspace(){try{this.statusBar.showLoading("Scanning workspace");const e=await this.analyzer.analyzeWorkspace(),t=this.buildAnalysisMessage(e),n=await r.window.showInformationMessage(t,"Activate Recommended Mode","Select Agents","View Details");"Activate Recommended Mode"===n?await this.activateMode(e.recommendations.mode):"Select Agents"===n?await this.showAgentSelector():"View Details"===n&&await this.showAnalysisDetails(e),this.statusBar.initialize()}catch(e){console.error("Workspace scan failed:",e),this.statusBar.showError(`Workspace scan failed: ${e}`)}}async autoSetup(){try{if(!r.workspace.workspaceFolders)return void r.window.showErrorMessage("No workspace folder open");this.statusBar.showLoading("Setting up BMAD");const e=r.workspace.workspaceFolders[0];await this.orchestrator.initializeWorkspace(e),this.statusBar.initialize()}catch(e){console.error("Auto-setup failed:",e),this.statusBar.showError(`Auto-setup failed: ${e}`)}}async detectTechStack(){try{this.statusBar.showLoading("Detecting technology stack");const e=(await this.analyzer.analyzeWorkspace()).projectAnalysis,t=[`**Project Type:** ${e.type}`,`**Framework:** ${e.framework}`,`**Language:** ${e.language}`,`**Complexity:** ${e.complexity}`,"","**Features:**","- Frontend: "+(e.hasFrontend?"✅":"❌"),"- Backend: "+(e.hasBackend?"✅":"❌"),"- Database: "+(e.hasDatabase?"✅":"❌"),"- Authentication: "+(e.hasAuthentication?"✅":"❌"),"- Docker: "+(e.hasDocker?"✅":"❌"),"- Tests: "+(e.hasTests?"✅":"❌"),"",`**Confidence:** ${Math.round(100*e.confidence)}%`].join("\n");await r.window.showInformationMessage("Technology Stack Detection Complete",{modal:!0,detail:t},"OK"),this.statusBar.initialize()}catch(e){console.error("Tech stack detection failed:",e),this.statusBar.showError(`Tech stack detection failed: ${e}`)}}async showAgentSelector(){try{const e=await this.analyzer.analyzeWorkspace(),t=this.getAvailableAgents().map(t=>({id:t.id,label:`${t.icon} ${t.name}`,description:t.title,detail:t.description,picked:e.projectAnalysis.recommendedAgents.includes(t.id)})),n=await r.window.showQuickPick(t,{title:"Select BMAD AI Agents",placeHolder:"Choose agents for your project (recommended agents are pre-selected)",canPickMany:!0,matchOnDescription:!0,matchOnDetail:!0});if(n&&n.length>0){const e=n.map(e=>e.id);await this.orchestrator.activateAgents(e),r.window.showInformationMessage(`Activated agents: ${n.map(e=>e.label).join(", ")}`)}}catch(e){console.error("Agent selection failed:",e),r.window.showErrorMessage(`Agent selection failed: ${e}`)}}async performAgentHandoff(){r.window.showInformationMessage("Agent handoff functionality coming soon!")}async performHealthCheck(){try{this.statusBar.showLoading("Performing health check");const e=r.languages.getDiagnostics(),t=this.processDiagnostics(e);if(0===t.length)r.window.showInformationMessage("✅ Project health check passed - no issues detected");else{this.statusBar.updateIssues(t);const e=await r.window.showWarningMessage(`Health check found ${t.length} issues`,"Activate Debug Mode","View Issues","Ignore");"Activate Debug Mode"===e?await this.activateMode("debugMode"):"View Issues"===e&&await r.commands.executeCommand("workbench.actions.view.problems")}this.statusBar.initialize()}catch(e){console.error("Health check failed:",e),this.statusBar.showError(`Health check failed: ${e}`)}}async showProgressDetails(){const e=this.statusBar.getCurrentInfo();if(e.progress){const t=e.progress,n=[`**Mode:** ${t.mode}`,`**Phase:** ${t.phase}`,`**Progress:** ${t.progress}%`,t.currentAgent?`**Current Agent:** ${this.getAgentDisplayName(t.currentAgent)}`:"",t.estimatedTimeRemaining?`**Time Remaining:** ${Math.round(t.estimatedTimeRemaining/60)} minutes`:"","","**Completed Tasks:**",...t.completedTasks.map(e=>`- ${e}`),"","**Remaining Tasks:**",...t.remainingTasks.map(e=>`- ${e}`)].filter(e=>""!==e).join("\n");await r.window.showInformationMessage("BMAD Workflow Progress",{modal:!0,detail:n},"OK")}else r.window.showInformationMessage("No active workflow progress to display")}async showModeDetails(){const e=this.statusBar.getCurrentInfo();if(e.mode){const t=[`**Active Mode:** ${this.getModeDisplayName(e.mode)}`,`**Description:** ${this.getModeDescription(e.mode)}`,"","**Active Agents:**",...e.activeAgents.map(e=>`- ${this.getAgentDisplayName(e)}`),"",`**Last Updated:** ${e.lastUpdate.toLocaleString()}`].join("\n");await r.window.showInformationMessage("BMAD Mode Details",{modal:!0,detail:t},"OK")}else r.window.showInformationMessage("No active BMAD mode")}async showErrorDetails(){r.window.showInformationMessage("Error details functionality coming soon!")}onConfigurationChanged(e){console.log("BMAD configuration changed:",e)}getModeDisplayName(e){return{documentation:"Documentation Mode",fullDevelopment:"Full Development Mode",continueProject:"Continue Existing Project",taskOverview:"Task List Overview",debugMode:"Debug & Troubleshoot",continuousExecution:"Continuous Execution",featureGapAnalysis:"Feature Gap Analysis",githubIntegration:"GitHub Integration"}[e]||e}getModeDescription(e){return{documentation:"Generate comprehensive project documentation with collaborative AI agents",fullDevelopment:"Complete application development workflow with full AI agent support",continueProject:"Resume interrupted project work with full context restoration",taskOverview:"Comprehensive project status dashboard and task management",debugMode:"Systematic issue diagnosis and resolution through specialist AI collaboration",continuousExecution:"Autonomous workflow execution without interruption prompts",featureGapAnalysis:"Comprehensive analysis of missing features and improvement opportunities",githubIntegration:"Professional GitHub repository documentation and workflow management"}[e]||"BMAD workflow mode"}getAgentDisplayName(e){return{john:"John (Product Manager)",fred:"Fred (Architect)",jane:"Jane (Design Architect)",sage:"Sage (Security Engineer)",alex:"Alex (Platform Engineer)",tyler:"Tyler (Task Breakdown Specialist)",taylor:"Taylor (Technical Writer)",sarah:"Sarah (Product Owner)",bob:"Bob (Scrum Master)",dakota:"Dakota (Dependency Modernization Specialist)"}[e]||e}getAvailableAgents(){return[{id:"john",name:"John",title:"Product Manager",description:"Product requirements and planning",icon:"$(person)"},{id:"fred",name:"Fred",title:"Architect",description:"System architecture and technical design",icon:"$(tools)"},{id:"jane",name:"Jane",title:"Design Architect",description:"UI/UX and frontend architecture",icon:"$(paintcan)"},{id:"sage",name:"Sage",title:"Security Engineer",description:"Security analysis and vulnerability assessment",icon:"$(shield)"},{id:"alex",name:"Alex",title:"Platform Engineer",description:"Infrastructure and DevOps",icon:"$(server)"},{id:"tyler",name:"Tyler",title:"Task Breakdown Specialist",description:"Task management and workflow organization",icon:"$(checklist)"},{id:"taylor",name:"Taylor",title:"Technical Writer",description:"Documentation and technical writing",icon:"$(book)"},{id:"sarah",name:"Sarah",title:"Product Owner",description:"Product ownership and stakeholder management",icon:"$(account)"},{id:"bob",name:"Bob",title:"Scrum Master",description:"Agile process facilitation",icon:"$(organization)"}]}buildAnalysisMessage(e){const t=e.projectAnalysis;return`Workspace Analysis Complete\n\nProject Type: ${t.type}\nFramework: ${t.framework}\nComplexity: ${t.complexity}\nRecommended Mode: ${t.recommendedMode}\nConfidence: ${Math.round(100*t.confidence)}%`}async showAnalysisDetails(e){const t=e.projectAnalysis,n=["**Project Analysis Results**","",`Type: ${t.type}`,`Framework: ${t.framework}`,`Language: ${t.language}`,`Complexity: ${t.complexity}`,`Confidence: ${Math.round(100*t.confidence)}%`,"","**Features:**","Frontend: "+(t.hasFrontend?"Yes":"No"),"Backend: "+(t.hasBackend?"Yes":"No"),"Database: "+(t.hasDatabase?"Yes":"No"),"Authentication: "+(t.hasAuthentication?"Yes":"No"),"Docker: "+(t.hasDocker?"Yes":"No"),"Tests: "+(t.hasTests?"Yes":"No"),"",`**Recommended Mode:** ${t.recommendedMode}`,`**Recommended Agents:** ${t.recommendedAgents.join(", ")}`].join("\n");await r.window.showInformationMessage("Detailed Analysis Results",{modal:!0,detail:n},"OK")}async debugCurrentFile(){const e=r.window.activeTextEditor;if(e)try{this.statusBar.showLoading("Analyzing file for debugging"),await this.activateMode("debugMode"),await r.window.showInformationMessage(`BMAD Debug Mode activated for ${e.document.fileName}`)}catch(e){this.statusBar.showError(`Failed to debug file: ${e}`)}else await r.window.showWarningMessage("No active file to debug")}async documentCurrentFile(){const e=r.window.activeTextEditor;if(e)try{this.statusBar.showLoading("Generating documentation"),await this.activateMode("documentation"),await r.window.showInformationMessage(`BMAD Documentation Mode activated for ${e.document.fileName}`)}catch(e){this.statusBar.showError(`Failed to document file: ${e}`)}else await r.window.showWarningMessage("No active file to document")}async debugSelection(){const e=r.window.activeTextEditor;if(e&&!e.selection.isEmpty)try{this.statusBar.showLoading("Analyzing selection for debugging");const t=e.document.getText(e.selection);await r.window.showInformationMessage("BMAD Debug Analysis",{modal:!0,detail:`Analyzing selected code:\n\n${t.substring(0,200)}...`},"Continue with Debug Mode").then(async e=>{"Continue with Debug Mode"===e&&await this.activateMode("debugMode")})}catch(e){this.statusBar.showError(`Failed to debug selection: ${e}`)}else await r.window.showWarningMessage("No code selected for debugging")}async explainCode(){const e=r.window.activeTextEditor;if(e)try{this.statusBar.showLoading("Analyzing code for explanation"),e.selection.isEmpty?e.document.getText():e.document.getText(e.selection),await r.window.showInformationMessage("BMAD Code Explanation",{modal:!0,detail:"Ready to explain code context. Use Documentation Mode for detailed analysis."},"Start Documentation Mode").then(async e=>{"Start Documentation Mode"===e&&await this.activateMode("documentation")})}catch(e){this.statusBar.showError(`Failed to explain code: ${e}`)}else await r.window.showWarningMessage("No active file to explain")}async generateTests(){const e=r.window.activeTextEditor;if(e)try{this.statusBar.showLoading("Preparing test generation"),await r.window.showInformationMessage("BMAD Test Generation",{modal:!0,detail:`Ready to generate tests for ${e.document.fileName}. Use Full Development Mode for comprehensive test generation.`},"Start Full Development Mode").then(async e=>{"Start Full Development Mode"===e&&await this.activateMode("fullDevelopment")})}catch(e){this.statusBar.showError(`Failed to generate tests: ${e}`)}else await r.window.showWarningMessage("No active file for test generation")}async analyzeFolder(){try{this.statusBar.showLoading("Analyzing folder");const e=await this.analyzer.analyzeWorkspace();await this.showAnalysisDetails(e)}catch(e){this.statusBar.showError(`Failed to analyze folder: ${e}`)}}async generateDocsForFolder(){try{this.statusBar.showLoading("Generating folder documentation"),await this.activateMode("documentation"),await r.window.showInformationMessage("BMAD Documentation Mode activated for folder analysis")}catch(e){this.statusBar.showError(`Failed to generate folder documentation: ${e}`)}}async refreshAnalysis(){try{this.statusBar.showLoading("Refreshing analysis");const e=await this.analyzer.analyzeWorkspace();this.statusBar.updateMode(e.projectAnalysis.recommendedMode,e.projectAnalysis.recommendedAgents),await r.window.showInformationMessage("Workspace analysis refreshed successfully")}catch(e){this.statusBar.showError(`Failed to refresh analysis: ${e}`)}}async openSettings(){await r.commands.executeCommand("workbench.action.openSettings","bmad")}async showHelp(){const e=["# BMAD AI Agent Orchestrator Help","","## Available Modes:","- **Documentation Mode**: Generate PRD, Architecture, and Checklist","- **Full Development Mode**: Complete application development","- **Debug Mode**: Systematic issue diagnosis and resolution","- **Continue Project**: Resume work on existing projects","- **Task Overview**: View and manage project tasks","","## Quick Actions:","- Press `Ctrl+Shift+B` for Quick Mode Selection",'- Use Command Palette (`Ctrl+Shift+P`) and search for "BMAD"',"- Right-click folders for context menu options","","## Integration:","- Works seamlessly with Augment AI Code extension","- Provides menu options and workflow integration","- Supports both standalone and integrated usage"].join("\n");await r.window.showInformationMessage("BMAD Help",{modal:!0,detail:e},"Open Documentation","Quick Start").then(async e=>{"Quick Start"===e?await this.showQuickModeSelector():"Open Documentation"===e&&await r.env.openExternal(r.Uri.parse("https://github.com/bmad-code/bmad-vscode-extension"))})}processDiagnostics(e){const t=[];for(const[n,a]of e)for(const e of a)e.severity===r.DiagnosticSeverity.Error&&t.push({severity:"critical",category:"quality",message:e.message,file:n.fsPath,line:e.range.start.line,canAutoFix:!1});return t}async performDependencyAudit(){try{this.statusBar.showLoading("Dakota: Starting dependency audit...");const e=await this.dakotaAgent.performDependencyAudit(),t=`Dependency Audit Complete!\n\n📦 Total Dependencies: ${e.totalDependencies}\n🛡️ Security Issues: ${e.vulnerabilities.length}\n📈 Outdated Packages: ${e.outdatedPackages.length}\n💯 Health Score: ${e.healthScore}/100\n\n📋 Recommendations: ${e.recommendations.length} actions identified`;await r.window.showInformationMessage("Dakota: Dependency Audit Results",{modal:!0,detail:t},"View Report","Start Modernization").then(async t=>{if("View Report"===t){const t=r.Uri.file(`${e.projectPath}/dependency-audit-report.md`);await r.window.showTextDocument(t)}else"Start Modernization"===t&&await this.performDependencyModernization()})}catch(e){this.statusBar.showError(`Dakota: Audit failed - ${e}`),await r.window.showErrorMessage(`Dependency audit failed: ${e}`)}}async performDependencyModernization(){try{this.statusBar.showLoading("Dakota: Modernizing dependencies...");const e=await this.dakotaAgent.performDependencyAudit();if(0===e.recommendations.length)return void await r.window.showInformationMessage("Dakota: All dependencies are up to date!","No modernization needed at this time.");const t=e.recommendations.filter(e=>"critical"===e.riskLevel).length,n=e.recommendations.filter(e=>"auto-update"===e.action).length,a=e.recommendations.filter(e=>"manual-review"===e.action).length,o=`Modernization Plan:\n\n🚨 Critical Security Updates: ${t}\n⚡ Automatic Updates: ${n}\n👀 Manual Reviews Required: ${a}\n\nDakota will handle automatic updates safely and present manual reviews for your approval.`;"Proceed with Modernization"===await r.window.showWarningMessage("Dakota: Dependency Modernization Plan",{modal:!0,detail:o},"Proceed with Modernization","Cancel")&&(await this.dakotaAgent.performDependencyModernization(e),await r.window.showInformationMessage("Dakota: Modernization Complete!",`Successfully updated ${n} dependencies. ${a} items require your review.`))}catch(e){this.statusBar.showError(`Dakota: Modernization failed - ${e}`),await r.window.showErrorMessage(`Dependency modernization failed: ${e}`)}}async startDependencyMonitoring(){try{await this.dakotaAgent.startDependencyMonitoring(),await r.window.showInformationMessage("Dakota: Background Monitoring Started","Dakota will now monitor your dependencies for security issues and updates in the background.")}catch(e){this.statusBar.showError(`Dakota: Failed to start monitoring - ${e}`),await r.window.showErrorMessage(`Failed to start dependency monitoring: ${e}`)}}async stopDependencyMonitoring(){try{this.dakotaAgent.stopDependencyMonitoring(),await r.window.showInformationMessage("Dakota: Background Monitoring Stopped","Dependency monitoring has been disabled.")}catch(e){await r.window.showErrorMessage(`Failed to stop dependency monitoring: ${e}`)}}async checkSecurityVulnerabilities(){try{this.statusBar.showLoading("Dakota: Scanning for security vulnerabilities...");const e=await this.dakotaAgent.performDependencyAudit(),t=e.vulnerabilities;if(0===t.length)return void await r.window.showInformationMessage("Dakota: Security Scan Complete","✅ No security vulnerabilities found in your dependencies!");const n=t.filter(e=>"critical"===e.severity).length,a=t.filter(e=>"high"===e.severity).length,o=`Security Vulnerabilities Found:\n\n🚨 Critical: ${n}\n⚠️ High: ${a}\n📋 Medium: ${t.filter(e=>"medium"===e.severity).length}\nℹ️ Low: ${t.filter(e=>"low"===e.severity).length}\n\nTotal: ${t.length} vulnerabilities detected`;await r.window.showWarningMessage("Dakota: Security Vulnerabilities Detected",{modal:!0,detail:o},"View Details","Start Remediation").then(async t=>{if("View Details"===t){const t=r.Uri.file(`${e.projectPath}/dependency-audit-report.md`);await r.window.showTextDocument(t)}else"Start Remediation"===t&&await this.performDependencyModernization()})}catch(e){this.statusBar.showError(`Dakota: Security scan failed - ${e}`),await r.window.showErrorMessage(`Security vulnerability scan failed: ${e}`)}}async updateOutdatedDependencies(){try{this.statusBar.showLoading("Dakota: Checking for outdated dependencies...");const e=await this.dakotaAgent.performDependencyAudit(),t=e.outdatedPackages;if(0===t.length)return void await r.window.showInformationMessage("Dakota: Dependencies Up to Date","✅ All your dependencies are already at their latest versions!");const n=t.filter(e=>"auto-update"===e.updateRecommendation?.action&&"low"===e.updateRecommendation?.riskLevel).length,a=`Outdated Dependencies Found:\n\n📦 Total Outdated: ${t.length}\n✅ Safe Auto-Updates: ${n}\n👀 Require Review: ${t.length-n}\n\nDakota can safely update ${n} dependencies automatically.`;await r.window.showInformationMessage("Dakota: Outdated Dependencies",{modal:!0,detail:a},"Update Safe Dependencies","Full Modernization").then(async t=>{"Update Safe Dependencies"===t?await this.dakotaAgent.performDependencyModernization(e):"Full Modernization"===t&&await this.performDependencyModernization()})}catch(e){this.statusBar.showError(`Dakota: Update check failed - ${e}`),await r.window.showErrorMessage(`Failed to check for outdated dependencies: ${e}`)}}async generateDependencyReport(){try{this.statusBar.showLoading("Dakota: Generating dependency report...");const e=await this.dakotaAgent.performDependencyAudit();await r.window.showInformationMessage("Dakota: Dependency Report Generated",`📋 Comprehensive dependency report has been generated with ${e.totalDependencies} dependencies analyzed.`,"Open Report").then(async t=>{if("Open Report"===t){const t=r.Uri.file(`${e.projectPath}/dependency-audit-report.md`);await r.window.showTextDocument(t)}})}catch(e){this.statusBar.showError(`Dakota: Report generation failed - ${e}`),await r.window.showErrorMessage(`Failed to generate dependency report: ${e}`)}}async analyzeDependencyLicenses(){try{this.statusBar.showLoading("Dakota: Analyzing dependency licenses...");const e=await this.dakotaAgent.performDependencyAudit();await r.window.showInformationMessage("Dakota: License Analysis Complete",`📄 License analysis completed for ${e.totalDependencies} dependencies. Check the full report for details.`,"View Report").then(async t=>{if("View Report"===t){const t=r.Uri.file(`${e.projectPath}/dependency-audit-report.md`);await r.window.showTextDocument(t)}})}catch(e){this.statusBar.showError(`Dakota: License analysis failed - ${e}`),await r.window.showErrorMessage(`License analysis failed: ${e}`)}}}},733:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.AugmentIntegration=void 0;const r=s(n(398));t.AugmentIntegration=class{orchestrator;analyzer;statusBar;augmentExtension;isIntegrated=!1;constructor(e,t,n){this.orchestrator=e,this.analyzer=t,this.statusBar=n}async initialize(){try{if(this.augmentExtension=r.extensions.getExtension("augment.ai-code")||r.extensions.getExtension("augment.code")||r.extensions.getExtension("augment-ai.code"),!this.augmentExtension)return console.log("Augment AI Code extension not found. BMAD will use standard VS Code integration."),void await this.setupFallbackIntegration();await this.integrateWithAugment()}catch(e){console.error("Failed to initialize Augment integration:",e),await this.setupFallbackIntegration()}}async integrateWithAugment(){if(!this.augmentExtension)throw new Error("Augment extension not available");try{const e=await this.augmentExtension.activate();e&&"function"==typeof e.registerWorkflowProvider?(await this.registerBmadWorkflowProvider(e),this.isIntegrated=!0,console.log("Successfully integrated BMAD with Augment AI Code extension")):(console.log("Augment extension does not support workflow provider API. Using fallback integration."),await this.setupFallbackIntegration())}catch(e){console.error("Failed to integrate with Augment:",e),await this.setupFallbackIntegration()}}async registerBmadWorkflowProvider(e){const t={id:"bmad-orchestrator",name:"🟣 BMAD AI Agent Orchestrator",description:"Collaborative AI agent workflows for comprehensive development",icon:"$(robot)",color:"#8B5CF6",workflows:[{id:"documentation-mode",name:"📚 Documentation Mode",description:"Generate comprehensive project documentation (PRD, Architecture, Checklist)",icon:"$(book)",category:"Planning",color:"#8B5CF6",handler:this.handleDocumentationMode.bind(this)},{id:"full-development-mode",name:"🚀 Full Development Mode",description:"Complete application development with AI agents",icon:"$(rocket)",category:"Development",color:"#8B5CF6",handler:this.handleFullDevelopmentMode.bind(this)},{id:"debug-mode",name:"Debug & Troubleshoot",description:"Systematic issue diagnosis and resolution",icon:"$(debug)",category:"Debugging",handler:this.handleDebugMode.bind(this)},{id:"continue-project",name:"Continue Project",description:"Resume work on existing project with context awareness",icon:"$(debug-continue)",category:"Development",handler:this.handleContinueProject.bind(this)},{id:"task-overview",name:"Task Overview",description:"View and manage project tasks and progress",icon:"$(list-tree)",category:"Management",handler:this.handleTaskOverview.bind(this)},{id:"continuous-execution",name:"Continuous Execution",description:"Autonomous workflow execution without user prompts",icon:"$(sync)",category:"Automation",handler:this.handleContinuousExecution.bind(this)},{id:"feature-gap-analysis",name:"Feature Gap Analysis",description:"Analyze missing features and implementation gaps",icon:"$(search)",category:"Analysis",handler:this.handleFeatureGapAnalysis.bind(this)},{id:"github-integration",name:"GitHub Integration",description:"Automated GitHub workflow and issue management",icon:"$(github)",category:"Integration",handler:this.handleGithubIntegration.bind(this)},{id:"dependency-audit",name:"🔍 Dakota: Dependency Audit",description:"Comprehensive dependency analysis with Context7 research",icon:"$(search)",category:"Maintenance",handler:this.handleDependencyAudit.bind(this)},{id:"dependency-modernization",name:"⬆️ Dakota: Dependency Modernization",description:"Automated dependency updates and modernization",icon:"$(arrow-up)",category:"Maintenance",handler:this.handleDependencyModernization.bind(this)},{id:"security-scan",name:"🛡️ Dakota: Security Scan",description:"Real-time security vulnerability detection and remediation",icon:"$(shield)",category:"Security",handler:this.handleSecurityScan.bind(this)}]};await e.registerWorkflowProvider(t)}async setupFallbackIntegration(){await this.registerVSCodeMenus(),console.log("BMAD fallback integration initialized")}async registerVSCodeMenus(){const e=await r.window.showInformationMessage("BMAD AI Agent Orchestrator is ready! Access workflows via Command Palette (Ctrl+Shift+P) or status bar.","Show Commands","Quick Start");"Show Commands"===e?await r.commands.executeCommand("workbench.action.showCommands"):"Quick Start"===e&&await r.commands.executeCommand("bmad.quickModeSelect")}async handleDocumentationMode(e){try{this.statusBar.showLoading("Initializing Documentation Mode");const t=await this.analyzer.analyzeWorkspace();await this.orchestrator.executeMode("documentation",t.projectAnalysis),this.statusBar.updateMode("documentation",t.projectAnalysis.recommendedAgents),e&&"function"==typeof e.onComplete&&e.onComplete({success:!0,message:"Documentation Mode completed successfully",outputs:["prd.md","architecture.md","checklist.md"]})}catch(t){this.statusBar.showError(`Documentation Mode failed: ${t}`),e&&"function"==typeof e.onError&&e.onError(t)}}async handleFullDevelopmentMode(e){try{this.statusBar.showLoading("Initializing Full Development Mode");const t=await this.analyzer.analyzeWorkspace();await this.orchestrator.executeMode("fullDevelopment",t.projectAnalysis),this.statusBar.updateMode("fullDevelopment",t.projectAnalysis.recommendedAgents),e&&"function"==typeof e.onComplete&&e.onComplete({success:!0,message:"Full Development Mode initiated successfully"})}catch(t){this.statusBar.showError(`Full Development Mode failed: ${t}`),e&&"function"==typeof e.onError&&e.onError(t)}}async handleDebugMode(e){try{this.statusBar.showLoading("Initializing Debug Mode");const t=await this.analyzer.analyzeWorkspace();await this.orchestrator.executeMode("debugMode",t.projectAnalysis),this.statusBar.updateMode("debugMode",t.projectAnalysis.recommendedAgents),e&&"function"==typeof e.onComplete&&e.onComplete({success:!0,message:"Debug Mode completed successfully"})}catch(t){this.statusBar.showError(`Debug Mode failed: ${t}`),e&&"function"==typeof e.onError&&e.onError(t)}}async handleContinueProject(e){try{this.statusBar.showLoading("Continuing Project");const t=await this.analyzer.analyzeWorkspace();await this.orchestrator.executeMode("continueProject",t.projectAnalysis),this.statusBar.updateMode("continueProject",t.projectAnalysis.recommendedAgents),e&&"function"==typeof e.onComplete&&e.onComplete({success:!0,message:"Project continuation initiated successfully"})}catch(t){this.statusBar.showError(`Continue Project failed: ${t}`),e&&"function"==typeof e.onError&&e.onError(t)}}async handleTaskOverview(e){try{this.statusBar.showLoading("Loading Task Overview");const t=await this.analyzer.analyzeWorkspace();await this.orchestrator.executeMode("taskOverview",t.projectAnalysis),this.statusBar.updateMode("taskOverview",t.projectAnalysis.recommendedAgents),e&&"function"==typeof e.onComplete&&e.onComplete({success:!0,message:"Task Overview loaded successfully"})}catch(t){this.statusBar.showError(`Task Overview failed: ${t}`),e&&"function"==typeof e.onError&&e.onError(t)}}async handleContinuousExecution(e){try{this.statusBar.showLoading("Starting Continuous Execution");const t=await this.analyzer.analyzeWorkspace();await this.orchestrator.executeMode("continuousExecution",t.projectAnalysis),this.statusBar.updateMode("continuousExecution",t.projectAnalysis.recommendedAgents),e&&"function"==typeof e.onComplete&&e.onComplete({success:!0,message:"Continuous Execution started successfully"})}catch(t){this.statusBar.showError(`Continuous Execution failed: ${t}`),e&&"function"==typeof e.onError&&e.onError(t)}}async handleFeatureGapAnalysis(e){try{this.statusBar.showLoading("Analyzing Feature Gaps");const t=await this.analyzer.analyzeWorkspace();await this.orchestrator.executeMode("featureGapAnalysis",t.projectAnalysis),this.statusBar.updateMode("featureGapAnalysis",t.projectAnalysis.recommendedAgents),e&&"function"==typeof e.onComplete&&e.onComplete({success:!0,message:"Feature Gap Analysis completed successfully"})}catch(t){this.statusBar.showError(`Feature Gap Analysis failed: ${t}`),e&&"function"==typeof e.onError&&e.onError(t)}}async handleGithubIntegration(e){try{this.statusBar.showLoading("Initializing GitHub Integration");const t=await this.analyzer.analyzeWorkspace();await this.orchestrator.executeMode("githubIntegration",t.projectAnalysis),this.statusBar.updateMode("githubIntegration",t.projectAnalysis.recommendedAgents),e&&"function"==typeof e.onComplete&&e.onComplete({success:!0,message:"GitHub Integration completed successfully"})}catch(t){this.statusBar.showError(`GitHub Integration failed: ${t}`),e&&"function"==typeof e.onError&&e.onError(t)}}isAugmentIntegrated(){return this.isIntegrated}getAugmentInfo(){return this.augmentExtension?{available:!0,version:this.augmentExtension.packageJSON?.version,id:this.augmentExtension.id}:{available:!1}}async handleDependencyAudit(e){try{this.statusBar.showLoading("Initializing Dakota Dependency Audit"),await r.commands.executeCommand("bmad.dependencyAudit"),this.statusBar.showSuccess("Dakota: Dependency audit completed")}catch(e){throw this.statusBar.showError(`Failed to perform dependency audit: ${e}`),e}}async handleDependencyModernization(e){try{this.statusBar.showLoading("Initializing Dakota Dependency Modernization"),await r.commands.executeCommand("bmad.dependencyModernization"),this.statusBar.showSuccess("Dakota: Dependency modernization completed")}catch(e){throw this.statusBar.showError(`Failed to perform dependency modernization: ${e}`),e}}async handleSecurityScan(e){try{this.statusBar.showLoading("Initializing Dakota Security Scan"),await r.commands.executeCommand("bmad.checkSecurityVulnerabilities"),this.statusBar.showSuccess("Dakota: Security scan completed")}catch(e){throw this.statusBar.showError(`Failed to perform security scan: ${e}`),e}}dispose(){this.isIntegrated=!1}}},735:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigurationManager=void 0;const r=s(n(398));t.ConfigurationManager=class{CONFIG_SECTION="bmad";configurationChangeListener;constructor(){this.setupConfigurationWatcher()}getConfiguration(){const e=r.workspace.getConfiguration(this.CONFIG_SECTION);return{autoInitialize:e.get("autoInitialize",!0),defaultMode:e.get("defaultMode","documentation"),enableRealTimeMonitoring:e.get("enableRealTimeMonitoring",!0),autoActivateRecommendedAgents:e.get("autoActivateRecommendedAgents",!0),debugModeThreshold:e.get("debugModeThreshold",5),progressNotifications:e.get("progressNotifications",!0),intelligentRecommendations:e.get("intelligentRecommendations",!0),statusBarIntegration:e.get("statusBarIntegration",!0)}}async updateConfiguration(e,t=r.ConfigurationTarget.Workspace){const n=r.workspace.getConfiguration(this.CONFIG_SECTION);for(const[a,o]of Object.entries(e))await n.update(a,o,t)}getConfigValue(e,t){return r.workspace.getConfiguration(this.CONFIG_SECTION).get(e,t)}setupConfigurationWatcher(){this.configurationChangeListener=r.workspace.onDidChangeConfiguration(e=>{e.affectsConfiguration(this.CONFIG_SECTION)&&this.onConfigurationChanged()})}onConfigurationChanged(){const e=this.getConfiguration();r.commands.executeCommand("bmad.internal.configurationChanged",e),console.log("BMAD configuration updated:",e)}validateConfiguration(e){const t=[];return(e.debugModeThreshold<1||e.debugModeThreshold>20)&&t.push("Debug mode threshold must be between 1 and 20"),["documentation","fullDevelopment","continueProject","taskOverview","debugMode","continuousExecution","featureGapAnalysis","githubIntegration"].includes(e.defaultMode)||t.push(`Invalid default mode: ${e.defaultMode}`),{isValid:0===t.length,errors:t}}async resetToDefaults(){await this.updateConfiguration({autoInitialize:!0,defaultMode:"documentation",enableRealTimeMonitoring:!0,autoActivateRecommendedAgents:!0,debugModeThreshold:5,progressNotifications:!0,intelligentRecommendations:!0,statusBarIntegration:!0})}exportConfiguration(){const e=this.getConfiguration();return JSON.stringify(e,null,2)}async importConfiguration(e){try{const t=JSON.parse(e),n=this.validateConfiguration(t);if(!n.isValid)throw new Error(`Invalid configuration: ${n.errors.join(", ")}`);await this.updateConfiguration(t)}catch(e){throw new Error(`Failed to import configuration: ${e}`)}}getWorkspaceConfigPath(){const e=r.workspace.workspaceFolders?.[0];if(e)return r.Uri.joinPath(e.uri,".vscode","bmad.json").fsPath}async saveWorkspaceConfiguration(){const e=this.getWorkspaceConfigPath();if(!e)throw new Error("No workspace folder available");const t=this.getConfiguration(),n=JSON.stringify(t,null,2),a=(new TextEncoder).encode(n);await r.workspace.fs.writeFile(r.Uri.file(e),a)}async loadWorkspaceConfiguration(){const e=this.getWorkspaceConfigPath();if(e)try{const t=r.Uri.file(e),n=await r.workspace.fs.readFile(t),a=(new TextDecoder).decode(n);await this.importConfiguration(a)}catch(e){console.log("No workspace configuration found, using defaults")}}dispose(){this.configurationChangeListener&&this.configurationChangeListener.dispose()}}},823:(e,t)=>{function n(e){return e&&"function"==typeof e.registerWorkflowProvider&&"function"==typeof e.unregisterWorkflowProvider&&"function"==typeof e.getWorkflowProviders}Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_AUGMENT_CONFIG=void 0,t.isAugmentAPI=n,t.isAugmentExtendedAPI=function(e){return n(e)&&"function"==typeof e.addMainMenuItems&&"function"==typeof e.showPanel},t.DEFAULT_AUGMENT_CONFIG={enableWorkflowProvider:!0,enableMenuIntegration:!0,enableProgressReporting:!0,defaultCategory:"AI Workflows",fallbackToVSCode:!0,showNotifications:!0}},881:function(e,t,n){var a,o=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,o)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&o(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.DependencyMonitor=void 0;const r=s(n(398)),c=s(n(896)),d=s(n(928));t.DependencyMonitor=class{context7;statusBar;isMonitoring=!1;monitoringPolicy;activeAlerts=new Map;monitoringStats;securityCheckTimer=null;updateCheckTimer=null;workspaceWatcher=null;constructor(e,t,n){this.context7=e,this.statusBar=t,this.monitoringPolicy={securityCheckInterval:144e5,updateCheckInterval:864e5,autoUpdateEnabled:!0,autoUpdateRiskLevel:"low",notificationThreshold:"medium",backgroundProcessingEnabled:!0,maxConcurrentChecks:3,...n},this.monitoringStats={totalPackagesMonitored:0,lastSecurityCheck:null,lastUpdateCheck:null,alertsGenerated:0,autoUpdatesPerformed:0,context7QueriesExecuted:0,averageResponseTime:0},this.loadConfiguration()}async startMonitoring(){this.isMonitoring||(this.isMonitoring=!0,console.log("Dakota: Starting background dependency monitoring"),this.setupFileWatchers(),this.scheduleSecurityChecks(),this.scheduleUpdateChecks(),await this.performInitialScan(),this.statusBar.showInfo("Dakota: Background monitoring active"))}stopMonitoring(){this.isMonitoring&&(this.isMonitoring=!1,console.log("Dakota: Stopping background dependency monitoring"),this.securityCheckTimer&&(clearInterval(this.securityCheckTimer),this.securityCheckTimer=null),this.updateCheckTimer&&(clearInterval(this.updateCheckTimer),this.updateCheckTimer=null),this.workspaceWatcher&&(this.workspaceWatcher.dispose(),this.workspaceWatcher=null),this.statusBar.showInfo("Dakota: Background monitoring stopped"))}updatePolicy(e){this.monitoringPolicy={...this.monitoringPolicy,...e},this.isMonitoring&&(this.stopMonitoring(),this.startMonitoring())}getMonitoringStatus(){return{isActive:this.isMonitoring,policy:this.monitoringPolicy,stats:this.monitoringStats,activeAlerts:Array.from(this.activeAlerts.values())}}loadConfiguration(){const e=r.workspace.getConfiguration("bmad.dakota.monitoring");this.monitoringPolicy.securityCheckInterval=e.get("securityCheckInterval",144e5),this.monitoringPolicy.updateCheckInterval=e.get("updateCheckInterval",864e5),this.monitoringPolicy.autoUpdateEnabled=e.get("autoUpdateEnabled",!0),this.monitoringPolicy.autoUpdateRiskLevel=e.get("autoUpdateRiskLevel","low"),this.monitoringPolicy.notificationThreshold=e.get("notificationThreshold","medium"),this.monitoringPolicy.backgroundProcessingEnabled=e.get("backgroundProcessingEnabled",!0),this.monitoringPolicy.maxConcurrentChecks=e.get("maxConcurrentChecks",3)}setupFileWatchers(){const e=r.workspace.workspaceFolders?.[0];if(!e)return;const t=`**/{${["package.json","package-lock.json","yarn.lock","requirements.txt","pyproject.toml","Cargo.toml","Cargo.lock","go.mod","go.sum","pom.xml","build.gradle","composer.json","composer.lock","Gemfile","Gemfile.lock"].join(",")}}`;this.workspaceWatcher=r.workspace.createFileSystemWatcher(t),this.workspaceWatcher.onDidChange(async e=>{console.log(`Dakota: Dependency file changed: ${e.fsPath}`),await this.handleDependencyFileChange(e)}),this.workspaceWatcher.onDidCreate(async e=>{console.log(`Dakota: Dependency file created: ${e.fsPath}`),await this.handleDependencyFileChange(e)})}scheduleSecurityChecks(){this.securityCheckTimer=setInterval(async()=>{this.monitoringPolicy.backgroundProcessingEnabled&&await this.performSecurityCheck()},this.monitoringPolicy.securityCheckInterval)}scheduleUpdateChecks(){this.updateCheckTimer=setInterval(async()=>{this.monitoringPolicy.backgroundProcessingEnabled&&await this.performUpdateCheck()},this.monitoringPolicy.updateCheckInterval)}async performInitialScan(){try{console.log("Dakota: Performing initial dependency scan"),await this.performSecurityCheck(),setTimeout(async()=>{await this.performUpdateCheck()},3e4)}catch(e){console.error("Dakota: Initial scan failed:",e)}}async performSecurityCheck(){if(this.isMonitoring)try{const e=Date.now();console.log("Dakota: Performing background security check");const t=r.workspace.workspaceFolders?.[0];if(!t)return;const n=await this.discoverDependencies(t.uri.fsPath);this.monitoringStats.totalPackagesMonitored=n.length;const a=n.slice(0,this.monitoringPolicy.maxConcurrentChecks);for(const e of a){const t=await this.context7.securityResearch(e.name,e.version,e.ecosystem);t&&(this.monitoringStats.context7QueriesExecuted++,await this.processSecurityResearch(e,t))}this.monitoringStats.lastSecurityCheck=new Date,this.monitoringStats.averageResponseTime=Date.now()-e}catch(e){console.error("Dakota: Security check failed:",e)}}async performUpdateCheck(){if(this.isMonitoring)try{console.log("Dakota: Performing background update check");const e=r.workspace.workspaceFolders?.[0];if(!e)return;this.monitoringStats.lastUpdateCheck=new Date}catch(e){console.error("Dakota: Update check failed:",e)}}async handleDependencyFileChange(e){if(this.isMonitoring)try{await new Promise(e=>setTimeout(e,1e3)),console.log(`Dakota: Processing dependency file change: ${d.basename(e.fsPath)}`),await this.performSecurityCheck()}catch(e){console.error("Dakota: Failed to handle dependency file change:",e)}}async discoverDependencies(e){const t=[],n=d.join(e,"package.json");if(c.existsSync(n))try{const e=JSON.parse(c.readFileSync(n,"utf8"));if(e.dependencies)for(const[n,a]of Object.entries(e.dependencies))t.push({name:n,version:a,ecosystem:"npm"})}catch(e){console.error("Dakota: Failed to parse package.json:",e)}return t}async processSecurityResearch(e,t){if(!t.response.success)return;const n=t.response.insights||[];if(n.some(e=>e.toLowerCase().includes("vulnerability")||e.toLowerCase().includes("security")||e.toLowerCase().includes("cve"))){const a={id:`security-${e.name}-${Date.now()}`,type:"security",severity:this.determineSeverity(n),packageName:e.name,currentVersion:e.version,message:`Security vulnerability detected in ${e.name}`,actionRequired:!0,timestamp:new Date,context7Research:t};this.addAlert(a)}}determineSeverity(e){const t=e.join(" ").toLowerCase();return t.includes("critical")||t.includes("remote code execution")?"critical":t.includes("high")||t.includes("privilege escalation")?"high":t.includes("medium")||t.includes("cross-site scripting")?"medium":"low"}addAlert(e){this.activeAlerts.set(e.id,e),this.monitoringStats.alertsGenerated++,this.shouldShowNotification(e.severity)&&this.showAlert(e)}shouldShowNotification(e){const t={critical:0,high:1,medium:2,low:3};return t[e]<=t[this.monitoringPolicy.notificationThreshold]}async showAlert(e){const t=`${"critical"===e.severity?"🚨":"high"===e.severity?"⚠️":"medium"===e.severity?"📋":"ℹ️"} Dakota: ${e.message}`;"critical"===e.severity?await r.window.showErrorMessage(t,"View Details","Dismiss"):"high"===e.severity?await r.window.showWarningMessage(t,"View Details","Dismiss"):await r.window.showInformationMessage(t,"View Details","Dismiss")}dispose(){this.stopMonitoring(),this.activeAlerts.clear()}}},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")},980:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AugmentMenuIntegration=void 0;const a=n(823);t.AugmentMenuIntegration=class{orchestrator;analyzer;augmentAPI=null;constructor(e,t){this.orchestrator=e,this.analyzer=t}async initialize(e){return(0,a.isAugmentExtendedAPI)(e)?(this.augmentAPI=e,await this.registerMenuProvider(),await this.addContextMenuItems(),await this.addMainMenuItems(),console.log("BMAD menu integration with Augment initialized successfully"),!0):(console.log("Augment API does not support extended menu integration"),!1)}async registerMenuProvider(){if(!this.augmentAPI)return;const e={id:"bmad-menu-provider",name:"BMAD AI Agent Orchestrator",menus:{"editor/context":this.getEditorContextMenuItems(),"explorer/context":this.getExplorerContextMenuItems(),"view/title":this.getViewTitleMenuItems(),commandPalette:this.getCommandPaletteItems()}};await this.augmentAPI.registerMenuProvider(e)}async addContextMenuItems(){this.augmentAPI&&(await this.augmentAPI.addContextMenuItems("explorer/context",[{id:"bmad.contextMenu.autoSetup",label:"BMAD: Auto Setup Project",icon:"$(robot)",command:"bmad.autoSetup",when:"explorerResourceIsFolder",group:"bmad@1"},{id:"bmad.contextMenu.analyzeProject",label:"BMAD: Analyze Project",icon:"$(search)",command:"bmad.analyzeProject",when:"explorerResourceIsFolder",group:"bmad@2"}]),await this.augmentAPI.addContextMenuItems("editor/context",[{id:"bmad.contextMenu.debugFile",label:"BMAD: Debug This File",icon:"$(debug)",command:"bmad.debugCurrentFile",when:"editorHasSelection",group:"bmad@1"},{id:"bmad.contextMenu.documentFile",label:"BMAD: Document This File",icon:"$(book)",command:"bmad.documentCurrentFile",when:"editorTextFocus",group:"bmad@2"}]))}async addMainMenuItems(){this.augmentAPI&&await this.augmentAPI.addMainMenuItems([{id:"bmad.mainMenu.workflows",label:"BMAD Workflows",icon:"$(robot)",submenu:[{id:"bmad.mainMenu.documentationMode",label:"Documentation Mode",icon:"$(book)",command:"bmad.activateDocumentationMode"},{id:"bmad.mainMenu.fullDevelopmentMode",label:"Full Development Mode",icon:"$(rocket)",command:"bmad.activateFullDevelopmentMode"},{id:"bmad.mainMenu.debugMode",label:"Debug & Troubleshoot",icon:"$(debug)",command:"bmad.debugMode"},{id:"bmad.mainMenu.separator1",label:"---",command:""},{id:"bmad.mainMenu.continueProject",label:"Continue Project",icon:"$(debug-continue)",command:"bmad.continueProject"},{id:"bmad.mainMenu.taskOverview",label:"Task Overview",icon:"$(list-tree)",command:"bmad.taskOverview"},{id:"bmad.mainMenu.separator2",label:"---",command:""},{id:"bmad.mainMenu.continuousExecution",label:"Continuous Execution",icon:"$(sync)",command:"bmad.continuousExecution"},{id:"bmad.mainMenu.featureGapAnalysis",label:"Feature Gap Analysis",icon:"$(search)",command:"bmad.featureGapAnalysis"},{id:"bmad.mainMenu.githubIntegration",label:"GitHub Integration",icon:"$(github)",command:"bmad.githubIntegration"}]},{id:"bmad.mainMenu.quickActions",label:"BMAD Quick Actions",icon:"$(zap)",submenu:[{id:"bmad.mainMenu.quickModeSelect",label:"Quick Mode Selection",icon:"$(list-selection)",command:"bmad.quickModeSelect"},{id:"bmad.mainMenu.autoSetup",label:"Auto Setup Workspace",icon:"$(gear)",command:"bmad.autoSetup"},{id:"bmad.mainMenu.showStatus",label:"Show Status",icon:"$(info)",command:"bmad.showStatus"}]}])}getEditorContextMenuItems(){return[{id:"bmad.editor.debugSelection",label:"Debug Selection with BMAD",icon:"$(debug)",command:"bmad.debugSelection",when:"editorHasSelection"},{id:"bmad.editor.explainCode",label:"Explain Code with BMAD",icon:"$(question)",command:"bmad.explainCode",when:"editorTextFocus"},{id:"bmad.editor.generateTests",label:"Generate Tests with BMAD",icon:"$(beaker)",command:"bmad.generateTests",when:"editorTextFocus"}]}getExplorerContextMenuItems(){return[{id:"bmad.explorer.setupProject",label:"Setup with BMAD",icon:"$(robot)",command:"bmad.autoSetup",when:"explorerResourceIsFolder"},{id:"bmad.explorer.analyzeFolder",label:"Analyze with BMAD",icon:"$(search)",command:"bmad.analyzeFolder",when:"explorerResourceIsFolder"},{id:"bmad.explorer.generateDocs",label:"Generate Documentation",icon:"$(book)",command:"bmad.generateDocsForFolder",when:"explorerResourceIsFolder"}]}getViewTitleMenuItems(){return[{id:"bmad.viewTitle.refresh",label:"Refresh BMAD Analysis",icon:"$(refresh)",command:"bmad.refreshAnalysis"},{id:"bmad.viewTitle.settings",label:"BMAD Settings",icon:"$(settings-gear)",command:"bmad.openSettings"}]}getCommandPaletteItems(){return[{id:"bmad.palette.quickStart",label:"BMAD: Quick Start",icon:"$(rocket)",command:"bmad.quickModeSelect"},{id:"bmad.palette.showHelp",label:"BMAD: Show Help",icon:"$(question)",command:"bmad.showHelp"}]}async showBmadPanel(){if(!this.augmentAPI)return;const e={title:"BMAD AI Agent Orchestrator",type:"webview",content:this.generatePanelHTML(),actions:[{id:"documentation-mode",label:"Documentation Mode",icon:"book",command:"bmad.activateDocumentationMode"},{id:"full-development-mode",label:"Full Development",icon:"rocket",command:"bmad.activateFullDevelopmentMode"},{id:"debug-mode",label:"Debug & Troubleshoot",icon:"debug",command:"bmad.debugMode"}]};await this.augmentAPI.showPanel("bmad-orchestrator",e)}generatePanelHTML(){return'\n            <div class="bmad-panel">\n                <h2>🤖 BMAD AI Agent Orchestrator</h2>\n                <p>Choose a workflow to get started:</p>\n                \n                <div class="workflow-grid">\n                    <button class="workflow-btn" onclick="executeCommand(\'bmad.activateDocumentationMode\')">\n                        <span class="icon">📚</span>\n                        <span class="title">Documentation Mode</span>\n                        <span class="desc">Generate PRD, Architecture, and Checklist</span>\n                    </button>\n                    \n                    <button class="workflow-btn" onclick="executeCommand(\'bmad.activateFullDevelopmentMode\')">\n                        <span class="icon">🚀</span>\n                        <span class="title">Full Development</span>\n                        <span class="desc">Complete application development</span>\n                    </button>\n                    \n                    <button class="workflow-btn" onclick="executeCommand(\'bmad.debugMode\')">\n                        <span class="icon">🐛</span>\n                        <span class="title">Debug & Troubleshoot</span>\n                        <span class="desc">Systematic issue resolution</span>\n                    </button>\n                    \n                    <button class="workflow-btn" onclick="executeCommand(\'bmad.continueProject\')">\n                        <span class="icon">▶️</span>\n                        <span class="title">Continue Project</span>\n                        <span class="desc">Resume existing work</span>\n                    </button>\n                </div>\n                \n                <div class="quick-actions">\n                    <button onclick="executeCommand(\'bmad.quickModeSelect\')">Quick Mode Selection</button>\n                    <button onclick="executeCommand(\'bmad.autoSetup\')">Auto Setup</button>\n                    <button onclick="executeCommand(\'bmad.showStatus\')">Show Status</button>\n                </div>\n            </div>\n            \n            <style>\n                .bmad-panel { padding: 20px; font-family: var(--vscode-font-family); }\n                .workflow-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }\n                .workflow-btn {\n                    padding: 15px; border: 2px solid #8B5CF6;\n                    background: linear-gradient(135deg, #8B5CF6 0%, #A855F7 100%);\n                    color: white;\n                    border-radius: 8px; cursor: pointer; text-align: left; display: flex; flex-direction: column;\n                    box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);\n                    transition: all 0.3s ease;\n                }\n                .workflow-btn:hover {\n                    background: linear-gradient(135deg, #7C3AED 0%, #9333EA 100%);\n                    transform: translateY(-2px);\n                    box-shadow: 0 6px 16px rgba(139, 92, 246, 0.4);\n                }\n                .workflow-btn .icon { font-size: 24px; margin-bottom: 8px; color: #E5E7EB; }\n                .workflow-btn .title { font-weight: bold; margin-bottom: 4px; color: white; }\n                .workflow-btn .desc { font-size: 12px; opacity: 0.9; color: #E5E7EB; }\n                .quick-actions { display: flex; gap: 10px; margin-top: 20px; }\n                .quick-actions button {\n                    padding: 8px 16px; border: 2px solid #8B5CF6;\n                    background: rgba(139, 92, 246, 0.1); color: #8B5CF6;\n                    border-radius: 6px; cursor: pointer;\n                    transition: all 0.2s ease;\n                }\n                .quick-actions button:hover {\n                    background: #8B5CF6; color: white;\n                    transform: translateY(-1px);\n                }\n            </style>\n            \n            <script>\n                function executeCommand(command) {\n                    vscode.postMessage({ command: command });\n                }\n            <\/script>\n        '}dispose(){this.augmentAPI=null}}}},t={},n=function n(a){var o=t[a];if(void 0!==o)return o.exports;var i=t[a]={exports:{}};return e[a].call(i.exports,i,i.exports,n),i.exports}(144);module.exports=n})();